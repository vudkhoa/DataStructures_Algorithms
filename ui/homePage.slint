import { LogWarning } from "warning.slint";
import { CONST-FUNCTION-GLOBAL } from "CONST_FUNCTION.slint";
import { NAVBAR } from "navbar.slint";
import { LineEdit, VerticalBox, ScrollView, ListView, CheckBox, HorizontalBox } from "std-widgets.slint";
import { LogComfirm } from "COMFIRM.slint";
struct ticket {
}
struct flightSLINT {
    flightCode : string,
    departure : string,
    destination : string,
    state : int,
    planeCode : string,
    numberOfTicket_BOOKED : int,
    totalTicket: int
}
struct passengerSLINT {
    IDCard : string,
    firstName : string,
    lastName : string,
    sex: int, 
    seat: int
}

struct plane {
    IDPlane : string,
    typePlane : string,
    ColNumber : int,
    RowNumber : int, 
    isAvai : bool,
    flyTimes : int
}

export struct index {
    row : int, 
    col : int,
    check : bool
}

struct ticket {
    info : plane, 
    i : index,
    j : index
}

export global functionAPP {
    callback exit();
    // các tiêu chuẩn nhập xuất
    callback standardInputFlightCode(string, string) -> string;
    callback catchErorrInputFlightCode(string) -> string;

    callback standardInputFlightCodeSearch(string, string) -> string;
    callback catchErorrInputFlightCodeSearch(string) -> string;

    callback standardInputDay(string, string) -> string;
    callback catchErorrInputDay(string) -> string;

    callback standardInputMonth(string, string) -> string;
    callback catchErorrInputMonth(string) -> string;

    callback standardInputYear(string, string) -> string;
    callback catchErorrInputYear(string) -> string;
    
    callback standardInputDes(string, string) -> string;
    callback catchErorrInputDes(string) -> string;

    callback standardInputIDPlane(string, string) -> string;
    callback catchErorrInputIDPlane(string) -> string;

    callback standardInputIDPlaneSearch(string, string) -> string;
    callback catchErorrInputIDPlaneSearch(string) -> string;

    callback standardInputNumber(string, string) -> string;
    callback catchErorrInputNumber(string) -> string;

    callback standardInputIDCard(string, string) -> string;
    callback catchErorrInputIDCard(string) -> string;

    callback standardInputFirstName(string, string) -> string;
    callback catchErorrInputFirstName(string) -> string;

    callback standardInputLastName(string, string) -> string;
    callback catchErorrInputLastName(string) -> string;
    
    callback standardInputHour(string, string) -> string;
    callback catchErorrInputHour(string) -> string;

    callback standardInputMinute(string, string) -> string;
    callback catchErorrInputMinute(string) -> string;
    // Ket thuc khoi chuan hoa nhap xuat

    // khoi thoi gian
    in-out property <string> currentTime : "15/04/2024 08:25:17";
    callback getDayFromStringTime(string) -> string;
    callback getMonthFromStringTime(string) -> string;
    callback getYearFromStringTime(string)->string;
    callback getHourFromStringTime(string)->string;
    callback getMinuteFromStringTime(string)->string;
    // Ket thuc khoi thoi gian

    // Khoi may bay
    // PLANE PAGE ______________________________________________________________________________START
    in-out property <int> planePage_PlaneHasFocus : -1;
    in-out property <int> PlanePage_numberOfPlaneList : 15;
    in-out property <[plane]> PlanePage_PlaneList : [
        {IDPlane : "MH370", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "AK100", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "SUZI2", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "SU872", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "DMK03", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "KH211", typePlane : "AIRLSW", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "KAMMW", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "OPIQW", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "SADWW", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "Okina", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "WSTDC", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "AKIWU", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "MH370", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai :  true},
        {IDPlane : "OISS3", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "SOS62", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
    ];

    in-out property <int> modeSearch : 0;
    callback sortPlaneList_planePage_BYID();
    callback handleSortPlaneList_BYID();
    sortPlaneList_planePage_BYID => {
        handleSortPlaneList_BYID();
    }

    callback sortPlaneList_planePage_BYSEAT();
    callback handleSortPlanePlist_BYSEAT();
    sortPlaneList_planePage_BYSEAT => {
        handleSortPlanePlist_BYSEAT();
    }

    callback sortPlaneList_planePage_BYSTATUS_A();
    callback handleSortPlaneList_BYSTATUS_A();
    sortPlaneList_planePage_BYSTATUS_A() => {
        handleSortPlaneList_BYSTATUS_A();
    }

    callback sortPlaneList_planePage_BYSTATUS_U();
    callback handleSortPlaneList_BYSTATUS_U();
    sortPlaneList_planePage_BYSTATUS_U() => {
        handleSortPlaneList_BYSTATUS_U();
    }

    callback checkPlaneAvailable(string) -> bool;
    in-out property <string> planePage_searchCode;
    callback handleSearchPlane_PlanePageBy_MODE();
    callback handleSearchPlane_PlanePageByID_BYCPP(string);
    handleSearchPlane_PlanePageBy_MODE => {
        handleSearchPlane_PlanePageByID_BYCPP(planePage_searchCode);
        if (modeSearch == 1) {
            sortPlaneList_planePage_BYID();
        }
        if (modeSearch == 2) {
            sortPlaneList_planePage_BYSEAT();
        }
        if (modeSearch == 3) {
            sortPlaneList_planePage_BYSTATUS_A();
        }
        if (modeSearch == 4) {
            sortPlaneList_planePage_BYSTATUS_U();
        }
    }
    // PLANE PAGE ______________________________________________________________________________END

    // PASSENGER PAGE ______________________________________________________________________________START
    in-out property <int> passengerPage_numberOfListFlight : 24 ;
    in-out property <[flightSLINT]> passengerPage_listFlight : [
        {flightCode : "MANHDUY", departure : "25/11/2023 ", destination : "ha Noi", state : 3, planeCode : "MH370"},
        {flightCode : "KASSADIN", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "ZED", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "YASUO", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "VALUE", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "VARUS", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "AATROXX", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "DARIUS", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "LOIREA", departure : "25/11/2023 ", destination : "ha Noi", state : 3, planeCode : "MH370"},
        {flightCode : "KASSADIN", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "ZED", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "YASUO", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "VALUE", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "VARUS", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "AATROXX", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "DARIUS", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "LOIREA", departure : "25/11/2023 ", destination : "ha Noi", state : 3, planeCode : "MH370"},
        {flightCode : "KASSADIN", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "ZED", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "YASUO", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "VALUE", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "VARUS", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "AATROXX", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
        {flightCode : "DARIUS", departure : "25/11/2023 ", destination : "ha Noi", state : 1, planeCode : "MH370"},
    ];
    // danh sach hanh khach cua 1 chuyen bay nao do
    in-out property <[passengerSLINT]> passengerPage_listPassengerOfOneFlight;
    
    // cac truong du lieu cua trang passenger page, loc ra chuyen bay de hien thi danh sach hanh khach
    in-out property <string> passengerPage_inputFlightCodeSearch;
    in-out property <string> passengerPage_inputFliterDay;
    in-out property <string> passengerPage_inputFliterMonth;
    in-out property <string> passengerPage_inputFliterYear;
    in-out property <string> passengerPage_inputFliterDes;

    in-out property <string> passengerErorrCatch : "";
    callback resetPassengerPage();

    callback handlePassengerPage_searchFlight(); // khi goi ham nay, se lay cac gia tri trong lineEdit, gan len tren cac bien phia tren
    callback handlePassengerPage_searchFlight_BYCPP(string, string, string, string, string) -> string; // dinh nghia va su ly ben C++
    handlePassengerPage_searchFlight => {
        passengerErorrCatch = handlePassengerPage_searchFlight_BYCPP(
            passengerPage_inputFliterDay,
            passengerPage_inputFliterMonth, 
            passengerPage_inputFliterYear, 
            passengerPage_inputFliterDes,
            passengerPage_inputFlightCodeSearch
        );
        if (passengerErorrCatch != "") {CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(passengerErorrCatch);}
    }
    // PASSENGER PAGE ______________________________________________________________________________END
    
    // All Passenger PAGE ______________________________________________________________________________Start
    in-out property <int> AllPassengerPage_numberOfPassengerList :10;
    in-out property <int> passengerHasFocus_AllPASSPAGE : -1;

    in-out property <[passengerSLINT]> AllPassengerPage_listAllPassenger : [
        {IDCard : "09220912341", firstName : "Tran Dos Manh", lastName : "Duy", sex : 0},
        {IDCard : "0912341", firstName : "Tran Doa Manh", lastName : "Duy", sex : 1},
        {IDCard : "s", firstName : "Tran Dso Maanh", lastName : "Duy", sex : 0},
        {IDCard : " sasd", firstName : "Tran Do Manh", lastName : "Duy", sex : 1},
        {IDCard : "w", firstName : "Tran Do Masnh", lastName : "Duy", sex : 0},
        {IDCard : "dw", firstName : "Tran Do Maanh", lastName : "Duy", sex : 1},
        {IDCard : "a", firstName : "Tran Do Manh s", lastName : "Duy", sex : 0},
        {IDCard : "09220912341", firstName : "Tran Do Manh", lastName : "Duy", sex : 1},
        {IDCard : "09220912341", firstName : "Tran Do Mbanh", lastName : "Duy", sex : 0},
        {IDCard : "09220912341", firstName : "Tran Dor Manh", lastName : "Duy", sex : 1},
    ];
    in-out property <string> searchCodeIDCardPass_ALLPASSENGER;
    callback handleSearch_ALLPassenge_MODE();
    callback handleSearch_ALLPassenger_BYCPP(string);
    callback connect_passengerFlight(string);

    in-out property <int> modeSearchPass_ALLPASS : 0;
    callback handleSortPassengerALLLASSPAFE_ID();
    callback handleSortPassengerALLLASSPAFE_FirstName();
    callback handleSortPassengerALLLASSPAFE_LastName();
    callback handleSortPassengerALLLASSPAFE_Sex_MALE();
    callback handleSortPassengerALLLASSPAFE_Sex_FEMALE();

    handleSearch_ALLPassenge_MODE => {
        handleSearch_ALLPassenger_BYCPP(searchCodeIDCardPass_ALLPASSENGER);
        if (modeSearchPass_ALLPASS == 1) {
            handleSortPassengerALLLASSPAFE_ID();
        }
        if (modeSearchPass_ALLPASS == 2) {
            handleSortPassengerALLLASSPAFE_FirstName();
        }
        if (modeSearchPass_ALLPASS == 3) {
            handleSortPassengerALLLASSPAFE_LastName();
        }
        if (modeSearchPass_ALLPASS == 4) { 
            handleSortPassengerALLLASSPAFE_Sex_MALE();
        }
        if (modeSearchPass_ALLPASS == 5) {
            handleSortPassengerALLLASSPAFE_Sex_FEMALE();
        }
    }
    // All Passenger PAGE ______________________________________________________________________________End

    // edit All passenger ------------------------------------------------------------------------------START
    in-out property <int> passengerHasEditing_ALLPASSPAGE : -1;

    in-out property <string> editIDCard_ALLPASS_var;
    in-out property <string> editIFirastName_ALLPASS_var;
    in-out property <string> editLastName_ALLPASS_var;
    in-out property <int> editSex_ALLPASS_var;

    in-out property <string> resultEditPassenger;
    callback handleEditPass_ALLPASS();
    callback handleEditPass_ALLPASS_byCPP(string, string, string, string, int, string) -> string;
    handleEditPass_ALLPASS => {
        resultEditPassenger = handleEditPass_ALLPASS_byCPP(AllPassengerPage_listAllPassenger[passengerHasEditing_ALLPASSPAGE].IDCard, 
            editIDCard_ALLPASS_var, 
            editIFirastName_ALLPASS_var,
            editLastName_ALLPASS_var, 
            editSex_ALLPASS_var,
            searchCodeIDCardPass_ALLPASSENGER
        );
        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(resultEditPassenger);
        if (resultEditPassenger == "Successfully edited passenger information") {
            CONST-FUNCTION-GLOBAL.page_number_SHOW = 8;
            passengerHasEditing_ALLPASSPAGE = -1;
            passengerHasFocus_AllPASSPAGE = -1;
            CONST-FUNCTION-GLOBAL.editingPASSENGER_ALLPASSPAGE = -1;
        }   
        if (modeSearchPass_ALLPASS == 1) {
            handleSortPassengerALLLASSPAFE_ID();
        }
        if (modeSearchPass_ALLPASS == 2) {
            handleSortPassengerALLLASSPAFE_FirstName();
        }
        if (modeSearchPass_ALLPASS == 3) {
            handleSortPassengerALLLASSPAFE_LastName();
        }
        if (modeSearchPass_ALLPASS == 4) { 
            handleSortPassengerALLLASSPAFE_Sex_MALE();
        }
        if (modeSearchPass_ALLPASS == 5) {
            handleSortPassengerALLLASSPAFE_Sex_FEMALE();
        }
    }
    // edit All passenger ------------------------------------------------------------------------------END

    // add passenger -----------------------------------------------------------------------------------START

    in-out property <string> addPassengerIDCardNameInput_VAR;
    in-out property <string> addPassengerFirstNameInput_VAR;
    in-out property <string> addPassengerLastNameInput_VAR;
    in-out property <int> addPassengerSexInput_VAR : 7;

    in-out property <string> resultADDPassenger;
    callback handleADDPASSENGER_ALLPASS() -> int;
    callback handleADDPASSENGER_ALLPASS_BYCPP(string, string, string, int, string) -> string;
    handleADDPASSENGER_ALLPASS => {
        resultADDPassenger = handleADDPASSENGER_ALLPASS_BYCPP(
            addPassengerIDCardNameInput_VAR,
            addPassengerFirstNameInput_VAR,
            addPassengerLastNameInput_VAR,
            addPassengerSexInput_VAR,
            searchCodeIDCardPass_ALLPASSENGER
        );
        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(resultADDPassenger);
        
        if (modeSearchPass_ALLPASS == 1) {
            handleSortPassengerALLLASSPAFE_ID();
        }
        if (modeSearchPass_ALLPASS == 2) {
            handleSortPassengerALLLASSPAFE_FirstName();
        }
        if (modeSearchPass_ALLPASS == 3) {
            handleSortPassengerALLLASSPAFE_LastName();
        }
        if (modeSearchPass_ALLPASS == 4) { 
            handleSortPassengerALLLASSPAFE_Sex_MALE();
        }
        if (modeSearchPass_ALLPASS == 5) {
            handleSortPassengerALLLASSPAFE_Sex_FEMALE();
        }
        if (resultADDPassenger == "Added passengers successfully") {
            CONST-FUNCTION-GLOBAL.addingPASSENGER = false;
            return 1; // neu them thanh cong
        }
        return 0; // them that bai
    }
    // add passenger -----------------------------------------------------------------------------------START

    // Cac truong thong tin cua addplane Page
    // tim kiem

    // them may bay
    in-out property <string> addPlaneInputIdPlane;
    in-out property <string> addPlaneInputTypePlane;
    in-out property <string> addPlaneInputColNumber;
    in-out property <string> addPlaneInputRowNumber;

    in-out property <string> addPlane_catchErorr;
    callback handleDataAdd_PlanePage() -> int;
    callback handlAddPlaneByCPP(string, string, string, string, string) -> string;
    handleDataAdd_PlanePage => {
        addPlane_catchErorr = handlAddPlaneByCPP(addPlaneInputIdPlane, addPlaneInputTypePlane, addPlaneInputColNumber, addPlaneInputRowNumber, planePage_searchCode);
        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(addPlane_catchErorr);
        if (modeSearch  == 1) {
            handleSortPlaneList_BYID();
        }
        if (modeSearch == 2) {
            handleSortPlanePlist_BYSEAT();
        }
        if (modeSearch == 3) {
            handleSortPlaneList_BYSTATUS_A();
        }
        if (modeSearch == 4) {
            handleSortPlaneList_BYSTATUS_U();
        }
        if (addPlane_catchErorr == "Added aircraft successfully") {
            CONST-FUNCTION-GLOBAL.addingPLANE = false;
            return 1;
        }
        return 0;
    }

    // edit plane
    in-out property <int> PlanePage_editingPlane : -1;
    in-out property <string> editIDPlane_var;
    in-out property <string> editTypePlane_var;
    in-out property <string> editColNumberPlane_var;
    in-out property <string> editRowNumberPlane_var;
    in-out property <string> editPlane_catchErorr : "";
    callback handleDataEdit_PlanePage();
    callback handleEditPlane_PlanePageByCPP(string, int, string, string, string, string, string, int) -> string;
    handleDataEdit_PlanePage => {
        editPlane_catchErorr = handleEditPlane_PlanePageByCPP((functionAPP.PlanePage_PlaneList[functionAPP.PlanePage_editingPlane]).IDPlane, 
                                                                (functionAPP.PlanePage_PlaneList[functionAPP.PlanePage_editingPlane]).ColNumber * (functionAPP.PlanePage_PlaneList[functionAPP.PlanePage_editingPlane]).RowNumber, 
                                                                editIDPlane_var, 
                                                                editTypePlane_var, 
                                                                editColNumberPlane_var, 
                                                                editRowNumberPlane_var, 
                                                                planePage_searchCode,
                                                                modeSearch
                                                                );
        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(editPlane_catchErorr);
        if (editPlane_catchErorr == "Successfully edited the plane") {
            PlanePage_editingPlane = -1;
            planePage_PlaneHasFocus = -1;
            CONST-FUNCTION-GLOBAL.page_number_SHOW = 2;
            CONST-FUNCTION-GLOBAL.editingPlanePlanePageCONST = -1;
        }
    }
    // end edit

    // delete Plane
    callback handleDeletePlane();
    callback handleDeletePlaneCPP(string, string) -> string;
    in-out property <string> catchErorrDeletePlane;
    handleDeletePlane => {
        catchErorrDeletePlane = handleDeletePlaneCPP((PlanePage_PlaneList[functionAPP.planePage_PlaneHasFocus]).IDPlane, planePage_searchCode);
        if (catchErorrDeletePlane == "Deleted the plane successfully") {
            planePage_PlaneHasFocus = -1;
        }
        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(catchErorrDeletePlane);
        if (modeSearch  == 1) {
            handleSortPlaneList_BYID();
        }
        if (modeSearch == 2) {
            handleSortPlanePlist_BYSEAT();
        }
        if (modeSearch == 3) {
            handleSortPlaneList_BYSTATUS_A();
        }
        if (modeSearch == 4) {
            handleSortPlaneList_BYSTATUS_U();
        }
    }

    // FLIGHT____________________________________________________________________START
    in-out property <int> modeSearch_flightPage : 0;

    callback sortFlightList_BYID();
    callback sortFlightList_BYTIME();

    in-out property <int> numberOfFlightList_flightPage: 10;
    in-out property <[flightSLINT]> flightLIST_flightPage : [   
        {flightCode : "MHSK120", departure : "12/12/2023 12:34", destination: "Ha Noi", state : 1, planeCode: "MH370", numberOfTicket_BOOKED : 99, totalTicket: 100},
        {flightCode : "MHSK121", departure : "12/12/2023 11:43", destination: "TP. Ho Chi Minh", state : 1, planeCode: "MH370", numberOfTicket_BOOKED : 97, totalTicket: 100},
        {flightCode : "MHSK122", departure : "12/12/2023 15:00", destination: "Da Lat", state : 1, planeCode: "MH370", numberOfTicket_BOOKED : 34, totalTicket: 100},
        {flightCode : "MHSK123", departure : "12/12/2023 11:43", destination: "Bao Loc", state : 2, planeCode: "MH370", numberOfTicket_BOOKED : 12, totalTicket: 100},
        {flightCode : "MHSK124", departure : "12/12/2023 15:00", destination: "TP. Buon Me Thuat", state : 1, planeCode: "MH370", numberOfTicket_BOOKED : 57, totalTicket: 100},
        {flightCode : "MHSK125", departure : "12/12/2023 11:43", destination: "Ha Noi", state : 0, planeCode: "MH370", numberOfTicket_BOOKED : 84, totalTicket: 100},
        {flightCode : "MHSK126", departure : "12/12/2023 15:00", destination: "Ha Noi", state : 3, planeCode: "MH370", numberOfTicket_BOOKED : 63, totalTicket: 100},
        {flightCode : "MHSK127", departure : "12/12/2023 11:43", destination: "Ha Noi", state : 1, planeCode: "MH370", numberOfTicket_BOOKED : 11, totalTicket: 100},
        {flightCode : "MHSK128", departure : "12/12/2023 15:00", destination: "Ha Noi", state : 1, planeCode: "MH370", numberOfTicket_BOOKED : 9, totalTicket: 100},
        {flightCode : "MHSK129", departure : "12/12/2023 19:00", destination: "Ha Noi", state : 1, planeCode: "MH370", numberOfTicket_BOOKED : 100, totalTicket: 100},
    ];
    in-out property <int> flightHASFOCUS_flightPage : -1;
    in-out property <int> flightHasEDITING_flightPage : -1;

    in-out property <string> flightSearch_flightPage : ""; 
    
    in-out property <string> inputDayFilter_flightPage : "";
    in-out property <string> inputMonthFilter_flightPage : "";
    in-out property <string> inputYearFilter_flightPage : "";
    in-out property <string> inputDesFilter_flightPage : "";

    callback handleFilter_search_flightPage();
    in-out property <string> resultSearchFlightCode;
    callback handleFilter_search_flightPage_BYCPP(string, string, string, string, string) -> string;
    handleFilter_search_flightPage => {
        resultSearchFlightCode = handleFilter_search_flightPage_BYCPP(flightSearch_flightPage, inputDayFilter_flightPage, inputMonthFilter_flightPage, inputYearFilter_flightPage, inputDesFilter_flightPage);
        if (resultSearchFlightCode != "") {
            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(resultSearchFlightCode);
        }
        flightHASFOCUS_flightPage = -1;
        if (modeSearch_flightPage == 1) {
            sortFlightList_BYID();
        }
        if (modeSearch_flightPage == 2) {
            sortFlightList_BYTIME();
        }
    }

    in-out property <bool> Filter_by_time_period : false;
    in-out property <string> day_startFlight;
    in-out property <string> month_startFlight;
    in-out property <string> year_startFlight;

    in-out property <string> day_endFlight;
    in-out property <string> month_endFlight;
    in-out property <string> year_endFlight;

    in-out property <string> rsFilter_period : "";
    callback handleFilter_period();
    callback handleFilter_period_BYCPP(string, string, string, string, string, string) -> string;
    handleFilter_period => {
        rsFilter_period = handleFilter_period_BYCPP(
            day_startFlight,
            month_startFlight,
            year_startFlight,
            day_endFlight,
            month_endFlight,
            year_endFlight
        );
        if (rsFilter_period != "") {
            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(rsFilter_period);
        }
        if (modeSearch_flightPage == 1) {
            sortFlightList_BYID();
        }
        if (modeSearch_flightPage == 2) {
            sortFlightList_BYTIME();
        }
    }

    // FLIGHT____________________________________________________________________END

    // ADD FLIGHT __________________________________________________________________start
    in-out property <string> idPlaneHasChooseForFlight;
    in-out property <string> flightCode_ADDFLIGHT;
    in-out property <string> day_ADDFLIGHT;
    in-out property <string> month_ADDFLIGHT;
    in-out property <string> year_ADDFLIGHT;
    in-out property <string> des_ADDFLIGHT;
    in-out property <string> hour_ADDFLIGHT;
    in-out property <string> minute_ADDFLIGHT;

    in-out property <string> resultADDFLIGHT;
    callback handleADDFLIGHT() -> int;
    callback handleADDFLIGHT_BYCPP(string, string, string, string, string, string, string, string, string) -> string;
    handleADDFLIGHT => {
        resultADDFLIGHT = handleADDFLIGHT_BYCPP(flightCode_ADDFLIGHT, day_ADDFLIGHT, month_ADDFLIGHT, year_ADDFLIGHT, hour_ADDFLIGHT, minute_ADDFLIGHT, des_ADDFLIGHT, idPlaneHasChooseForFlight, flightSearch_flightPage);
        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(resultADDFLIGHT);
        flightHASFOCUS_flightPage = -1;
        if (modeSearch_flightPage == 1) {
            sortFlightList_BYID();
        }
        if (modeSearch_flightPage == 2) {
            sortFlightList_BYTIME();
        }
        if (resultADDFLIGHT =="Successful flight initiation") {
            return 1;
        }
        return 0;
    }
    // ADD FLIGHT __________________________________________________________________end


    // edit flight
    in-out property <string> idPlaneHasChoose_new;
    in-out property <string> newFlightCODE_editFlight;
    in-out property <string> newDay_editFlight;
    in-out property <string> newMonth_editFlight;
    in-out property <string> newYear_editFlight;
    in-out property <string> newHour_editFlight;
    in-out property <string> newMinute_editFlight;

    in-out property <string> newDes_editFlight;

    callback checkFlightCanEdit(string) -> bool;

    in-out property <string> result_editFlight;
    callback handleEditFlight();
    callback handleEditFlight_BYCPP(string, string, string, string, string, string, string, string, string) -> string;
    handleEditFlight => {
        result_editFlight = handleEditFlight_BYCPP(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].flightCode, newFlightCODE_editFlight, newDay_editFlight, newMonth_editFlight, newYear_editFlight, newHour_editFlight, newMinute_editFlight, newDes_editFlight, idPlaneHasChoose_new);
        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(result_editFlight);
        if (modeSearch_flightPage == 1) {
            sortFlightList_BYID();
        }
        if (modeSearch_flightPage == 2) {
            sortFlightList_BYTIME();
        }
        if (result_editFlight == "Flight editing was successful")  {
            CONST-FUNCTION-GLOBAL.editingFlight = false;
            flightHasEDITING_flightPage = -1;
            CONST-FUNCTION-GLOBAL.page_number_SHOW = 1;
        }
    }
    // end edit
    callback checkFlightToCancel(string) -> int;
    in-out property <string> rsCancelFlight;
    callback handleCancelFlight();
    callback handleCancelFlight_BYCPP(string) -> string;
    handleCancelFlight => {
        rsCancelFlight = handleCancelFlight_BYCPP(flightLIST_flightPage[flightHASFOCUS_flightPage].flightCode);
        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(rsCancelFlight);
        if (modeSearch_flightPage == 1) {
            sortFlightList_BYID();
        }
        if (modeSearch_flightPage == 2) {
            sortFlightList_BYTIME();
        }
    }
    // end cancel

    // book flight
    callback handleBookFlight();
    callback handleBookFlight_BYCPP(string) -> string;
    in-out property <string> rsString;
    handleBookFlight => {
        rsString = handleBookFlight_BYCPP(functionAPP.flightLIST_flightPage[functionAPP.flightHASFOCUS_flightPage].flightCode);
        if (rsString != "") {
            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(rsString);
        }
    }
}

export global ticket_global {
    in-out property <[index]> row : [
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
    ];
    in-out property <[index]> col : [
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
        {row: 20, col: 20, check : true},
    ];
    in-out property <[index]> z : [
        {row: 1, col: 2, check: true},
    ];
    in-out property <[passengerSLINT]> passengerList;

    // KHOI BIEN INFORMATION CHUYEN BAY
    in-out property <ticket> information;
    in-out property <string> frFlight : "TPHCM";
    in-out property <string> toFlight: "";
    in-out property <string> timeDepartingFlight : "";
    in-out property <string> timeArrivingFlight : "";
    in-out property <string> dateFlight: "";
    in-out property <string> flightCode : "";
    in-out property <int> flightStatus;

    // BIEN INFOMATION BOOK & CANCEL
    in-out property <string> book_information_idCard : "";
    in-out property <string> book_information_firstName : "Enter the First name";
    in-out property <string> book_information_lastName : "Enter the last name";
    in-out property <string> book_information_sex: "Enter the Sex";
    //1 -> MALE
    //2 -> FEMALE
    in-out property <int> chose_sex : 0;
    in-out property <string> cancel_information_idCard : "-----";
    in-out property <string> cancel_information_firstName : "-----";
    in-out property <string> cancel_information_lastName : "-----";

    // BIEN INFORMATION BOOK & CANCEL TMP
    in-out property <string> book_information_firstNameKey : "";
    in-out property <string> book_information_lastNameKey : "";
    in-out property <string> selftext_tmp : "";
    // 1 -> MALE
    // 2 -> FEMALE
    in-out property <int> cancel_information_sex : 0;

    // DAI + RONG CUA TRANG
    in-out property <physical-length> page_lengthwidth : 1200phx;
    in-out property <physical-length> page_lengthheight: 400phx;

    // CHON CHO NGOI
    in-out property <int> chose_ticketSeat : -1;
    in-out property <int> chose_ticketSeatTmp : -1;

    // CHON CHUC NANG TICKET
    // 1 -> book
    // 2 -> cancel
    in-out property <int> chose_ticketFunction : 0;

    // CALLBACK LAY && KIEM TRA DU LIEU DAU VAO
    // TICKET
    callback getCPP_information(string) -> string;
    callback getCPP_information_book_firstName(string) -> string;
    callback getCPP_information_book_lastName(string) -> string;

    // PASSENGER LIST FLIGHT
    callback passengerListFlight_getCPP_seat(string) -> int;
    callback passengerListFlight_search(string);
    callback passengerListFlight_checkIdCard(string) -> string;
    
    // TICKET & PASSENGER LIST FLIGHT
    callback getCPP_information_cancel(int);

    // CALLBACK CHUC NANG XU LY
    // TICKET
    callback buttonNext_book(string, string, string, int, int);
    callback buttonNext_cancel(string);
    callback buttonNext_book_checkIdCard(string) -> bool;
    // PASSENGER LIST FLIGHT
    callback passengerListFlight_sort(int);
    // TICKET & PASSENGER LIST FLIGHT
    callback standardize(string) -> string;

    // BIEN PASSENGER LIST FLIGHT
    in-out property <int> chose_passengerListFlight_list: -1;
    // 1 -> sort by id 
    // 2 -> sort by ticket code
    in-out property <int> chose_passengerListFlight_sort : 0;
    in-out property <string> passengerListFlight_searchTmp : "";

    callback back();
    back => {
        ticket-global.chose_ticketSeat = -1;
        ticket-global.chose_ticketSeatTmp = -1;
        ticket-global.chose_ticketFunction = 0;
        ticket-global.book_information_idCard = "";
        ticket-global.book_information_firstName = "Enter the First name";
        ticket-global.book_information_lastName = "Enter the last name";
        ticket-global.book_information_sex = "Enter the Sex";
        ticket-global.book_information_firstNameKey = "";
        ticket-global.book_information_lastNameKey = "";
        ticket-global.selftext_tmp = "";
        ticket-global.chose_sex = 0;
    }

    in-out property <int> seat_passenger: -1;
    in-out property <int> bought_ticket: -1;
    
    in-out property <string> s1 : "";
    in-out property <string> s2 : "";
    // 1 -> TICKET
    // 2 -> PASSENGER FLIGHT LIST
    in-out property <int> chose_function_passengerListFlight_ticket : 0;
}

//  BLOCK STATICTICAL _ 

//
component passengerPage_Header_search inherits Rectangle {
    callback reset_passengerPage_LineEdit();
    reset_passengerPage_LineEdit => {
        input-passengerPage-Header-search.text = "";
    }
    callback unFocusPassengerPage_Header_search();
    border-width: 4phx;
    border-color: rgba(255,255,255,0.4);
    width: 400phx;
    VerticalLayout {
        alignment: center;
        HorizontalLayout {
            alignment: center;
            spacing: 12phx;
            Rectangle {
                TouchArea {
                    clicked => {
                        input-passengerPage-Header-search.focus();
                    }
                }
                Text {text: "#Flight Code";color: white;font-weight: 700;font-size: 16phx;}
            }
            Rectangle {
                background: gray;
                height: 40phx;
                width: 250phx;
                input_passengerPage_Header_search := LineEdit {
                    width: 100%;
                    height: 100%;
                    placeholder-text: "Enter Flight Code";
                    horizontal-alignment: center;
                    font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                    edited => {
                        if (functionAPP.catchErorrInputFlightCodeSearch(self.text) != "") {
                            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputFlightCodeSearch(self.text));
                            unFocusPassengerPage_Header_search()
                        }
                        self.text = functionAPP.standardInputFlightCodeSearch(self.text, functionAPP.passengerPage_inputFlightCodeSearch);
                        functionAPP.passengerPage_inputFlightCodeSearch = self.text;
                        functionAPP.handlePassengerPage_searchFlight();
                    }
                    accepted => {unFocusPassengerPage_Header_search()}
                }
            }
        }
    }
}
component passengerPage-Header_function inherits Rectangle{
    callback resetPassengerPage_HEADER_FUNCTION();
    callback unfocus_HEADER_FUNCTION();
    width: 250phx;
    VerticalLayout {
        HorizontalLayout {
            alignment: space-between;
            spacing: 5phx;
            Rectangle {
                areaA := TouchArea {
                    clicked => {
                        CONST-FUNCTION-GLOBAL.page_number_SHOW = 8;
                        if (CONST-FUNCTION-GLOBAL.editingPASSENGER_ALLPASSPAGE != -1) {
                            CONST-FUNCTION-GLOBAL.page_number_SHOW = 9;
                        }
                        if (CONST-FUNCTION-GLOBAL.addingPASSENGER == true) {
                            CONST-FUNCTION-GLOBAL.page_number_SHOW = 10;
                        }
                    }
                }
                width: 150phx;
                background: rgba(255,255,255,0.5);
                border-color: white;
                border-width: 4phx;
                Text {text: "ALL PASSENGER";color: white; font-weight: 700; font-size: 14phx;}
                states [
                    hasPress when areaA.pressed : {
                        opacity : 0.5;
                    }
                ]
            }
            Rectangle {
                areaB := TouchArea {
                    clicked => {
                        resetPassengerPage_HEADER_FUNCTION();
                        unfocus_HEADER_FUNCTION();
                    }
                }
                width: 100phx;
                background: rgba(255,255,255,0.5);
                border-color: white;
                border-width: 4phx;
                Text {text: "RESET ALL";color: white; font-weight: 700; font-size: 14phx;}
                states [
                    hasPress when areaB.pressed : {
                        opacity : 0.5;
                    }
                ]
            }
        }
    }
}
component passengerPage_Header inherits Rectangle {
    callback resetPassengerPage_Header();
    callback unFocusPassengerPage_Header();
    VerticalLayout {
        alignment: center;
        HorizontalLayout {
            spacing: 12px;
            alignment: space-between;
            padding: 4phx;
            padding-left: 0;
            passengerPage_Header_search := passengerPage_Header_search {
                unFocusPassengerPage_Header_search => {
                    unFocusPassengerPage_Header();
                }
                height: 100%;
            }
            passengerPage-Header-function {
                resetPassengerPage_HEADER_FUNCTION => {
                    resetPassengerPage_Header();
                }
                unfocus_HEADER_FUNCTION => {
                    unFocusPassengerPage_Header();
                }
            }
        }
    }
}
component passengerPage_Body_filterBox_day inherits Rectangle {
    callback unFocus_passengerPage_Body_filterBox_day();
    callback resetInput();
    resetInput => {
        inputDayFliter.text = "";
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: rgba(255,255,255,0.8);
            Text {text: "DAY";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;font-weight: 700;color: #333;}
            TouchArea {
                clicked => {
                    inputDayFliter.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputDayFliter := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the date data field";
                edited => {
                    if (functionAPP.catchErorrInputDay(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDay(self.text));
                        unFocus_passengerPage_Body_filterBox_day();
                    }
                    self.text = functionAPP.standardInputDay(self.text, functionAPP.passengerPage_inputFliterDay);
                    functionAPP.passengerPage_inputFliterDay = self.text;
                    
                }
            }
        }
    }
}
component passengerPage_Body_filterBox_month inherits Rectangle {
    callback resetInput();
    resetInput => {
        inputMonthFilter.text = "";
    }
    callback unFocus_passengerPage_Body_filterBox_month();
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: rgba(255,255,255,0.8);
            Text {text: "MONTH";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;font-weight: 700;color: #333;}
            TouchArea {
                clicked => {
                    inputMonthFilter.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputMonthFilter := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the month data field";
                edited => {
                    if (functionAPP.catchErorrInputMonth(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputMonth(self.text));
                        unFocus_passengerPage_Body_filterBox_month();
                    }
                    self.text = functionAPP.standardInputMonth(self.text, functionAPP.passengerPage_inputFliterMonth);
                    functionAPP.passengerPage_inputFliterMonth = self.text;
                    
                }
            }
        }
    }
}
component passengerPage_Body_filterBox_year inherits Rectangle {
    callback resetInput();
    resetInput => {
        inputYearFilter.text = "";
    }
    callback unFocus_passengerPage_Body_filterBox_year();
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: rgba(255,255,255,0.8);
            Text {text: "YEAR";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;font-weight: 700;color: #333;}
            TouchArea {
                clicked => {
                    inputYearFilter.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputYearFilter := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the year data field";
                edited => {
                    if (functionAPP.catchErorrInputYear(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputYear(self.text));
                        unFocus_passengerPage_Body_filterBox_year();
                    }
                    self.text = functionAPP.standardInputYear(self.text, functionAPP.passengerPage_inputFliterYear);
                    functionAPP.passengerPage_inputFliterYear = self.text;
                    
                }
            }
        }
    }
}
component passengerPage_Body_filterBox_des inherits Rectangle {
    callback resetInput();
    resetInput => {
        inputDesFilter.text = "";
    }
    callback unFocus_passengerPage_Body_filterBox_des();
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: rgba(255,255,255,0.8);
            Text {text: "DESTINATION";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;font-weight: 700;color: #333;}
            TouchArea {
                clicked => {
                    inputDesFilter.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputDesFilter := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the destination data field";
                edited => {
                    if (functionAPP.catchErorrInputDes(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDes(self.text));
                        unFocus_passengerPage_Body_filterBox_des();
                    }
                    self.text = functionAPP.standardInputDes(self.text, functionAPP.passengerPage_inputFliterDes);
                    functionAPP.passengerPage_inputFliterDes = self.text;
                    
                }
            }
        }
    }
}
component passengerPage_Body_filterBox_filterBtn inherits Rectangle {
    callback unFocus_passengerPage_Body_filterBox_filterBtn();
    height: 100phx;
    VerticalLayout {
        alignment: end;
        HorizontalLayout {
            alignment: center;
            Rectangle {
                btnArea := TouchArea {
                    clicked => {
                        unFocus_passengerPage_Body_filterBox_filterBtn();
                        functionAPP.handlePassengerPage_searchFlight();
                    }
                }
                width: 200phx;
                height: 80phx;
                background: red;
                Text {text: "FILTER";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when btnArea.pressed : {
                        background: #FFF;
                    }
                ]
            }
        }
    }
}
component passengerPage_Body_filterBox inherits Rectangle {
    callback unFocus_passengerPage_Body_filterBox();
    callback resetAllInput_Body();
    resetAllInput_Body => {
        passengerPage_Body_filterBox_day.resetInput();
        passengerPage-Body-filterBox-month.resetInput();
        passengerPage-Body-filterBox-year.resetInput();
        passengerPage-Body-filterBox-des.resetInput();
    }
    background: rgba(255,255,255, 0.4);
    border-width: 5phx;
    border-color: #FFF;
    VerticalLayout {
        spacing : 15px;
        alignment: center;
        padding: 20phx;
        Rectangle {
            width: 100%; height : 100phx; background: transparent;
            Text {text: "FILTER_BY_FIELD";color: black; font-size: 28phx;font-weight: 700;}
        }
        passengerPage_Body_filterBox_day := passengerPage_Body_filterBox_day {
            unFocus_passengerPage_Body_filterBox_day => {
                unFocus_passengerPage_Body_filterBox();
            }
        }
        passengerPage-Body-filterBox-month := passengerPage-Body-filterBox-month {
            unFocus_passengerPage_Body_filterBox_month => {
                unFocus_passengerPage_Body_filterBox();
            }
        }
        passengerPage-Body-filterBox-year := passengerPage-Body-filterBox-year {
            unFocus_passengerPage_Body_filterBox_year => {
                unFocus_passengerPage_Body_filterBox();
            }
        }
        passengerPage-Body-filterBox-des := passengerPage-Body-filterBox-des {
            unFocus_passengerPage_Body_filterBox_des => {
                unFocus_passengerPage_Body_filterBox();
            }
        }
        passengerPage_Body_filterBox_filterBtn {unFocus_passengerPage_Body_filterBox_filterBtn => {
            unFocus_passengerPage_Body_filterBox();
        }}
    }
}
component passengerPage_Body_itemFlight inherits Rectangle {
    in-out property <int> stt;
    in-out property <string> flightCode;
    in-out property <string> departure;
    in-out property <string> destination;
    in-out property <int> states;
    in-out property <string> planeCode;
    drop-shadow-blur: 5phx;
    drop-shadow-offset-y: 2phx;
    width: 100%;
    height: 40phx;
    background: rgb(255,255,255, 0.9);
    itemArea := TouchArea {
        clicked => {
            functionAPP.connect_passengerFlight(flightCode);
            CONST-FUNCTION-GLOBAL.page_number_SHOW = 4;
            ticket-global.chose_function_passengerListFlight_ticket = 2;
        }
    }
    HorizontalLayout {
        alignment: space-around;
        Rectangle {width: 5%;  height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: @tr("#{}", stt); color : black;}}
        Rectangle {width: 27%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: flightCode; color : black;}}
        Rectangle {width: 27%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: departure; color : black;}}
        Rectangle {width: 27%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: destination; color : black;}}
    }
    states [
        hasPress when itemArea.pressed == true : {
            background : white;
        }
        hasHover when itemArea.has-hover : {
            background : red;
        }
    ]
}
component passengerPage_Body_listFlight inherits Rectangle {
    VerticalLayout {
        VerticalLayout {
            padding: 4px;
            Rectangle {
                drop-shadow-blur: 5phx;
                drop-shadow-color: black;
                drop-shadow-offset-y: 2phx;
                width: 100%;
                height: 40phx;
                background: #333;
                HorizontalLayout {
                    alignment: space-around;
                    Rectangle {width: 5%;  height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight : 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "STT"; color : white;}}
                    Rectangle {width: 27%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight : 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Flight Code"; color : white;}}
                    Rectangle {width: 27%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight : 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Departure"; color : white;}}
                    Rectangle {width: 27%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight : 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Destination"; color : white;}}
                }
            }
        }
        ListView {
            width: 100%;
            // height: 100%;
            for data[index] in functionAPP.passengerPage_listFlight : VerticalLayout {
                padding: 1phx;
                item := passengerPage_Body_itemFlight {
                    stt: index + 1;
                    flightCode: data.flightCode;
                    departure: data.departure;
                    destination: data.destination;
                }
            }
        }
    }
}
component passengerPage_Body inherits Rectangle{
    callback unFocusPassengerPage_Body();
    callback reset_passengerPage_Body();
    reset_passengerPage_Body => {
        passengerPage_Body_filterBox.resetAllInput_Body();
    }
    height: (CONST-FUNCTION-GLOBAL.MAX_HEIGHT * 0.92)* 0.865;
    border-width: 10phx;
    border-radius: 12px;
    border-color: rgba(255,255,255,0.2);
    VerticalLayout {
        padding: 34phx;
        vertical-stretch: 1;
        HorizontalLayout {
            spacing: 12phx;
            listFlightPassenger := Rectangle {
                horizontal-stretch: 7;
                if functionAPP.passengerPage_numberOfListFlight != 0 : passengerPage_Body_listFlight {}
                if functionAPP.passengerPage_numberOfListFlight == 0 : Rectangle {
                    background: rgba(255,255,255, 0.2);
                    border-color: white;
                    border-width: 9phx;
                    Text {
                        text: "There is no flights";
                        font-size: 30phx;
                        color : white;
                    }
                }
            }
            filterPassager := Rectangle {
                horizontal-stretch: 3;
                passengerPage_Body_filterBox := passengerPage_Body_filterBox {

                    unFocus_passengerPage_Body_filterBox => {
                        unFocusPassengerPage_Body();
                    }
                }
            }
        }
    }
}
component passengerPage inherits Rectangle {
    
    callback resetPassengerPage();
    resetPassengerPage => {
        passengerPage-Body.reset_passengerPage_Body();
        functionAPP.passengerPage_inputFliterDay = "";
        functionAPP.passengerPage_inputFliterDes = "";
        functionAPP.passengerPage_inputFliterMonth = "";
        functionAPP.passengerPage_inputFlightCodeSearch = "";
        functionAPP.passengerPage_inputFliterYear = "";
        functionAPP.handlePassengerPage_searchFlight();
    }
    callback unFocusPassengerPage();
    VerticalLayout {
        padding: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND;
        padding-top: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND / 2;
        padding-bottom: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND / 4;
        passengerPage-Header {
            resetPassengerPage_Header => {
                resetPassengerPage();
            }
            unFocusPassengerPage_Header => {
                unFocusPassengerPage();
            }
        }
        passengerPage-Body := passengerPage-Body {
            unFocusPassengerPage_Body => {
                unFocusPassengerPage();
            }
        }
    }
    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 0 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 0 : {
            visible : false;
        }
    ]
}

component listPassenge_ofOneFlight inherits Rectangle {
    width: 100phx; height: 100phx;background: red; Text {text: "Danh Sach Hanh Khach";}
    TouchArea {
        clicked => {
            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("CANH BAO BAO MAT");
            // CONST-FUNCTION-GLOBAL.page_number_SHOW = 0;
        }
    }
    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 5 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 5 : {
            visible : false;
        }
    ]
}

component planePage_Body_Info_IDPlane inherits Rectangle {
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "ID Plane";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center; color : black;font-weight: 700;}
        }
        Rectangle {
            background: #E8E8E8;
            horizontal-stretch: 7;
            idPlaneInput := Text {
                color: black;
                horizontal-alignment: center;
                vertical-alignment: center;
                text: "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _";
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
            }
        }
    }
    states [
        renderInfo when functionAPP.planePage_PlaneHasFocus != -1 : {
            idPlaneInput.text : functionAPP.PlanePage_PlaneList[functionAPP.planePage_PlaneHasFocus].IDPlane;
        }
    ]
}
component planePage_Body_Info_TypePlane inherits Rectangle {
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Type Plane";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center; color : black; font-weight: 700;}
        }
        Rectangle {
            background: #E8E8E8;
            horizontal-stretch: 7;
            typePlaneInput := Text {
                color: black;
                horizontal-alignment: center;
                vertical-alignment: center;
                text: "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _";
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
            }
        }
    }
    states [
        renderInfo when functionAPP.planePage_PlaneHasFocus != -1 : {
            typePlaneInput.text : functionAPP.PlanePage_PlaneList[functionAPP.planePage_PlaneHasFocus].typePlane;
        }
    ]
}
component planePage_Body_Info_Col inherits Rectangle {
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "ColNumber";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;font-weight: 700; color: black;}
        }
        Rectangle {
            background: #E8E8E8;
            horizontal-stretch: 7;
            colNumberInput := Text {
                color: black;
                vertical-alignment: center;
                text: "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _";
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
            }
        }
    }
    states [
        renderInfo when functionAPP.planePage_PlaneHasFocus != -1 : {
            colNumberInput.text : functionAPP.PlanePage_PlaneList[functionAPP.planePage_PlaneHasFocus].ColNumber;
        }
    ]
}
component planePage_Body_Info_Row inherits Rectangle {
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "RowNumber";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;font-weight: 700; color : black;}
        }
        Rectangle {
            background: #E8E8E8;
            horizontal-stretch: 7;
            rowNumInput := Text {
                color: black;
                text: "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _";
                vertical-alignment: center;
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
            }
        }
    }
    states [
        renderInfo when functionAPP.planePage_PlaneHasFocus != -1 : {
            rowNumInput.text : functionAPP.PlanePage_PlaneList[functionAPP.planePage_PlaneHasFocus].RowNumber;
        }
    ]
}
component planePage_Body_Info_status inherits Rectangle {
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Status";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;font-weight: 700; color : black;}
        }
        statusBlock := Rectangle {
            background: #E8E8E8;
            horizontal-stretch: 7;
            statusInput := Text {
                color: black;
                text: "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _";
                vertical-alignment: center;
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
            }
        }
    }
    states [
        renderInfo when functionAPP.planePage_PlaneHasFocus != -1 : {
            statusInput.text : (functionAPP.PlanePage_PlaneList[functionAPP.planePage_PlaneHasFocus].isAvai ? "AVAILABLE" : "UNAVAILABLE");
            statusBlock.background : (functionAPP.PlanePage_PlaneList[functionAPP.planePage_PlaneHasFocus].isAvai ? #00FF00 : #FF0000);
        }
    ]
}
component planePage_Body_Info_Button inherits Rectangle {
    if (CONST-FUNCTION-GLOBAL.modeChoosePlaneTOMakeFlight == true || CONST-FUNCTION-GLOBAL.modeCHancePlaneToMakeFlight == true) : Rectangle {
        width: 100%;
        height: 100%;
        background: white;
        z: 2;
        TouchArea {}
        Text {
            text: "Select the plane to make the flight";
            color: black;
            font-size: 25px;
        }
    }
    callback takeDataPlanePage_EditPlane();
    height: 100phx;
    VerticalLayout {
        alignment:end;
        HorizontalLayout {
            alignment: space-between;
            editBtn := Rectangle {
                editArea:= TouchArea {
                    clicked => {
                        if (functionAPP.planePage_PlaneHasFocus != -1) {
                            CONST-FUNCTION-GLOBAL.page_number_SHOW = 7;
                            functionAPP.PlanePage_editingPlane = functionAPP.planePage_PlaneHasFocus;
                            CONST-FUNCTION-GLOBAL.editingPlanePlanePageCONST = functionAPP.PlanePage_editingPlane;
                            takeDataPlanePage_EditPlane()
                        }
                        else {
                            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("You must choose 1 plane");
                        }
                    }
                }
                width: 140phx;
                height: 80phx;
                background: red;
                Text {text: "Edit";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when editArea.pressed : {
                        editBtn.background: #FFF;
                    }
                ]
            }
            ADDBtn := Rectangle {
                AddArea:= TouchArea {
                    clicked => {
                        CONST-FUNCTION-GLOBAL.page_number_SHOW = 6;
                        functionAPP.planePage_PlaneHasFocus = -1;
                        CONST-FUNCTION-GLOBAL.addingPLANE = true;
                    }
                }
                width: 140phx;
                height: 80phx;
                background: red;
                Text {text: "Add Plane";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when AddArea.pressed : {
                        ADDBtn.background: #FFF;
                    }
                ]
            }
            DeleteBtn := Rectangle {
                DeleteArea:= TouchArea {
                    clicked => {
                        if (functionAPP.planePage_PlaneHasFocus == -1) {
                            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("You must choose 1 plane");
                        }
                        else {
                            CONST-FUNCTION-GLOBAL.show_confirm_DELETE_PLANE();
                        }
                    }
                }
                width: 140phx;
                height: 80phx;
                background: red;
                Text {text: "Delete";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when DeleteArea.pressed : {
                        DeleteBtn.background: #FFF;
                    }
                ]
            }
        }
    }
}
component planePage_Body_Info inherits Rectangle {
    callback takeDataPlanePage_EditPlane_bodyInfo();
    background: rgba(255,255,255,1);
    border-width: 7phx;
    border-color: rgba(255,255,255,0.8);
    VerticalLayout {
        spacing : 15px;
        alignment: center;
        padding: 20phx;
        Rectangle {
            width: 100%; height : 100phx; background: transparent;
            Text {text: "INFOMATION";color: black;font-weight: 700; font-size: 28phx;}
        }
        planePage-Body-Info-IDPlane {}
        planePage-Body-Info-TypePlane {}
        planePage-Body-Info-Col {}
        planePage-Body-Info-Row {}
        planePage-Body-Info-status {}
        planePage-Body-Info-Button {
            takeDataPlanePage_EditPlane => {
                takeDataPlanePage_EditPlane_bodyInfo();
            }
        }
    }
}
component planePage_Body_ItemPlane inherits Rectangle {
    callback unfcus_planePage_Body_ItemPlane();
    in-out property <int> stt;
    in-out property <string> IDPlane;
    in-out property <string> typePlane;
    in-out property <int> SeatNumber;
    in-out property <bool> isAvailable;
    drop-shadow-blur: 5phx;
    width: 100%;
    height: 40phx;
    background: rgba(255,255,255,0.9);
    itemArea := TouchArea {
        clicked => {
            functionAPP.planePage_PlaneHasFocus = stt - 1;
            if (CONST-FUNCTION-GLOBAL.modeChoosePlaneTOMakeFlight == true) {
                CONST-FUNCTION-GLOBAL.show_confirm_choose_plane();
            }
            else if (CONST-FUNCTION-GLOBAL.modeCHancePlaneToMakeFlight == true) {
                CONST-FUNCTION-GLOBAL.show_confirm_change_plane();
            }
            unfcus_planePage_Body_ItemPlane();
        }
    }
    HorizontalLayout {
        alignment: space-around;
        Rectangle {width: 5%;  height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: 16px ;text: @tr("#{}", stt); color : black;}}
        Rectangle {width: 23%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: 16px ;text: IDPlane; color : black;}}
        Rectangle {width: 23%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: 16px ;text: typePlane; color : black;}}
        Rectangle {width: 23%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: 16px ;text: SeatNumber; color : black;}}
        Rectangle {width: 23%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: 18px ;text: (isAvailable ? "Available" : "Unavailable"); color : (isAvailable ? green : rgb(255,0,0));}}
    }
    states [
        editing when (functionAPP.PlanePage_editingPlane == stt - 1) : {
            background : #757575;
        }
        hasPress when itemArea.pressed == true : {
            background : #c0c0c0;
        }
        hasHover when itemArea.has-hover : {
            background : #dfdfdf;
        }
        hassFocus when (functionAPP.planePage_PlaneHasFocus == stt - 1) : {
            background : #a1a1a1;
        }
    ]
}
component planePage_Body_ListPlane inherits Rectangle {
    callback unfocus_planePage_Body_ListPlane();
    VerticalLayout {
        VerticalLayout {
            padding: 4px;
            Rectangle {
                drop-shadow-blur: 5phx;
                drop-shadow-color: #333;
                drop-shadow-offset-y: 2phx;
                width: 100%;
                height: 40phx;
                background: #333;
                HorizontalLayout {
                    alignment: space-around;
                    Rectangle {width: 5%;  height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "STT";}}
                    Rectangle {width: 23%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "ID Plane";}}
                    Rectangle {width: 23%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Type Plane";}}
                    Rectangle {width: 23%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Seats";}}
                    Rectangle {width: 23%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Status";}}

                }
            }
        }
        ListView {
            width: 100%;
            for data[index] in functionAPP.PlanePage_PlaneList : VerticalLayout {
                padding: 1phx;
                item := planePage-Body-ItemPlane {
                    unfcus_planePage_Body_ItemPlane => {
                        unfocus_planePage_Body_ListPlane();
                    }
                    stt: index + 1;
                    IDPlane: data.IDPlane;
                    typePlane: data.typePlane;
                    SeatNumber: data.ColNumber * data.RowNumber;
                    isAvailable: data.isAvai;
                }
            }
        }
    }
}
component planePage_Body inherits Rectangle{
    callback unfocus_planePage_Body();
    callback takeDataPlanePage_EditPlane_body();
    height: (CONST-FUNCTION-GLOBAL.MAX_HEIGHT * 0.92)* 0.865;
    border-width: 10phx;
    border-color: rgba(255,255,255,0.4);
    border-radius: 12phx;
    VerticalLayout {
        padding: 34phx;
        vertical-stretch: 1;
        HorizontalLayout {
            spacing: 12phx;
            Rectangle {
                horizontal-stretch: 7;
                if functionAPP.PlanePage_numberOfPlaneList != 0 : planePage_Body_ListPlane {unfocus_planePage_Body_ListPlane => {unfocus_planePage_Body();}}
                if functionAPP.PlanePage_numberOfPlaneList == 0 : Rectangle {
                    background: rgba(255,255, 255, 0.2);
                    border-color: white;
                    border-width: 10phx;
                    Text {
                        text: "There is no plane";
                        font-size: 30phx;
                        color : white;
                    }
                }
            }
            Rectangle {
                horizontal-stretch: 3;
                planePage-Body-Info {
                    takeDataPlanePage_EditPlane_bodyInfo => {
                        takeDataPlanePage_EditPlane_body();
                    }
                }
            }
        }
    }
}
component planePage_Header_Search inherits Rectangle {
    callback unFocus_PlanePageHeader_search();
    border-width: 4phx;
    border-color: rgba(255,255,255,0.4);
    width: 400phx;
    TouchArea {clicked => {input.focus()}}
    VerticalLayout {
        alignment: center;
        HorizontalLayout {
            alignment: center;
            spacing: 12phx;
            Rectangle {
                Text {text: "#ID Plane";color: white;font-weight: 700;font-size: 16phx;}
            }
            Rectangle {
                background: gray;
                height: 40phx;
                width: 250phx;
                input := LineEdit {
                    enabled: true;
                    width: 100%;
                    height: 100%;
                    placeholder-text: "Enter ID Plane";
                    horizontal-alignment: center;
                    font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                    edited => {
                        if (functionAPP.catchErorrInputIDPlaneSearch(self.text) != "") {
                            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputIDPlaneSearch(self.text));
                            unFocus_PlanePageHeader_search();
                        }
                        self.text = functionAPP.standardInputIDPlaneSearch(self.text, functionAPP.planePage_searchCode);
                        functionAPP.planePage_searchCode = self.text;
                        functionAPP.handleSearchPlane_PlanePageBy_MODE();
                        functionAPP.planePage_PlaneHasFocus = -1;
                    }
                    accepted => {
                        unFocus_PlanePageHeader_search();
                    }
                    states [
                        unabled_ when CONST-FUNCTION-GLOBAL.page_number_SHOW == 7 : {
                            enabled : false;
                        }
                        enabled_ when CONST-FUNCTION-GLOBAL.page_number_SHOW != 7 : {
                            enabled : true;
                        }
                    ]
                }
            }
        }
    }
}
component planePage_header_sort inherits Rectangle {
    width: 700phx;
    VerticalLayout {
        HorizontalLayout {
            spacing: 8phx;
            Rectangle {
                Text {text : "Sort By ID"; color : white;font_weight : 700;font-size : 18phx;}
                Area_ID := TouchArea {
                    clicked => {
                        if (functionAPP.PlanePage_editingPlane == -1) {
                            if (functionAPP.modeSearch == 1) {functionAPP.modeSearch = 0;}
                            else {
                                functionAPP.modeSearch = 1;
                                functionAPP.sortPlaneList_planePage_BYID();
                            }
                            functionAPP.planePage_PlaneHasFocus = -1;
                        }
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                states [
                    A when Area-ID.pressed : {
                        opacity: 0.5;
                    }
                    Y when functionAPP.modeSearch == 1 : {
                        background : red;
                    }
                ]
            }   
            Rectangle {
                Text {text : "Sort By N_Seat"; color : white;font_weight : 700;font-size : 18phx;}
                Area_SEAT := TouchArea {
                    clicked => {
                        if (functionAPP.PlanePage_editingPlane == -1) {
                            if (functionAPP.modeSearch == 2) {functionAPP.modeSearch = 0;}
                            else {
                                functionAPP.sortPlaneList_planePage_BYSEAT();
                                functionAPP.modeSearch = 2;
                            }
                            functionAPP.planePage_PlaneHasFocus = -1;
                        }
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                states [
                    A when Area-SEAT.pressed : {
                        opacity: 0.5;
                    }
                    Y when functionAPP.modeSearch == 2 : {
                        background : red;
                    }
                ]
            } 
            Rectangle {
                Text {text : "Available"; color : white;font_weight : 700;font-size : 18phx;}
                Area_Status1 := TouchArea {
                    clicked => {
                        if (functionAPP.PlanePage_editingPlane == -1) {
                            if (functionAPP.modeSearch == 3) {functionAPP.modeSearch = 0;}
                            else {
                                functionAPP.modeSearch = 3;
                                functionAPP.sortPlaneList_planePage_BYSTATUS_A();
                            }
                            functionAPP.planePage_PlaneHasFocus = -1;
                        }
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                states [
                    A when Area-Status1.pressed : {
                        opacity: 0.5;
                    }
                    Y when functionAPP.modeSearch == 3 : {
                        background : red;
                    }
                ]
            } 
            Rectangle {
                Text {text : "Unavailable"; color : white;font_weight : 700;font-size : 18phx;}
                Area_Status2 := TouchArea {
                    clicked => {
                        if (functionAPP.PlanePage_editingPlane == -1) {
                            if (functionAPP.modeSearch == 4) {functionAPP.modeSearch = 0;}
                            else {
                                functionAPP.modeSearch = 4;
                                functionAPP.sortPlaneList_planePage_BYSTATUS_U();
                            }
                            functionAPP.planePage_PlaneHasFocus = -1;
                        }
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                states [
                    A when Area-Status2.pressed : {
                        opacity: 0.5;
                    }
                    Y when functionAPP.modeSearch == 4 : {
                        background : red;
                    }
                ]
            } 
        }
    }
}
component planePage_Header inherits Rectangle {
    callback unFocus_PlanePage_header();
    VerticalLayout {
        alignment: center;
        HorizontalLayout {
            spacing: 12px;
            alignment: space-between;
            padding: 4phx;
            padding-left: 0;
            planePage_Header_Search := planePage_Header_Search {
                unFocus_PlanePageHeader_search => {
                    unFocus_PlanePage_header();
                }
                height: 100%;
            }
            planePage_header_sort {}
        }
    }
}
component planePage inherits Rectangle {
    if (CONST-FUNCTION-GLOBAL.modeChoosePlaneTOMakeFlight == true || CONST-FUNCTION-GLOBAL.modeCHancePlaneToMakeFlight == true) : Rectangle {
        backAREA := TouchArea {
            clicked => {
                if (CONST-FUNCTION-GLOBAL.modeChoosePlaneTOMakeFlight == true) {
                    CONST-FUNCTION-GLOBAL.page_number_SHOW = 12;
                }
                if (CONST-FUNCTION-GLOBAL.modeCHancePlaneToMakeFlight == true) {
                    CONST-FUNCTION-GLOBAL.page_number_SHOW = 13;
                }
                CONST-FUNCTION-GLOBAL.modeCHancePlaneToMakeFlight = false;
                CONST-FUNCTION-GLOBAL.modeChoosePlaneTOMakeFlight = false;
            }
        }
        background: rgba(255,255,255, 0.8);
        width: 100phx;
        height: 30phx;
        x : 73phx;
        y : 0;
        Text {
            text: "BACK";
            font-weight: 700;
            color: black;
        }
        states [
            pre when backAREA.pressed : {
                background : rgba(255,255,255, 0.5);
            }
        ]
    }
    callback unFocus_PlanePage();
    callback takeDataPlanePage_EditPlane_PlanePage();
    VerticalLayout {
        padding: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND;
        padding-top: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND / 2;
        padding-bottom: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND / 4;
        planePage-Header {
            unFocus_PlanePage_header => {
                unFocus_PlanePage();
            }
        }
        planePage_Body {
            takeDataPlanePage_EditPlane_body => {
                takeDataPlanePage_EditPlane_PlanePage();
            }
            unfocus_planePage_Body => {
                unFocus_PlanePage();
            }
        }
    }
    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 2 || CONST-FUNCTION-GLOBAL.page_number_SHOW == 6 || CONST-FUNCTION-GLOBAL.page_number_SHOW == 7 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 2 && CONST-FUNCTION-GLOBAL.page_number_SHOW != 6 && CONST-FUNCTION-GLOBAL.page_number_SHOW != 7 : {
            visible : false;
        }
    ]
}

component addPlanePage_InputIDPlane inherits Rectangle {
    callback resetADDPlane();
    resetADDPlane => {
        addPlaneIDInput.text = "";
    }
    callback unFocus_addPlanePage_InputIDPlane();
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "ID Plane";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    addPlaneIDInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            addPlaneIDInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the ID plane";
                edited => {
                    if (functionAPP.catchErorrInputIDPlane(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputIDPlane(self.text));
                        unFocus_addPlanePage_InputIDPlane();
                    }
                    self.text = functionAPP.standardInputIDPlane(self.text, functionAPP.addPlaneInputIdPlane);
                    functionAPP.addPlaneInputIdPlane = self.text;
                }
            }
        }
    }
}
component addPlanePage_InputTypePlane inherits Rectangle {
    callback resetADDPLANE();
    resetADDPLANE => {
        addPlaneTypeInput.text = "";
    }
    callback unFocus_addPlanePage_InputTypePlane();
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Type Plane";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    addPlaneTypeInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            addPlaneTypeInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the type of plane";
                edited => {
                    if (functionAPP.catchErorrInputDes(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDes(self.text));
                        unFocus_addPlanePage_InputTypePlane();
                    }
                    self.text = functionAPP.standardInputDes(self.text, functionAPP.addPlaneInputTypePlane);
                    functionAPP.addPlaneInputTypePlane = self.text;
                }
            }
        }
    }
}
component addPlanePage_InputColPlane inherits Rectangle {
    callback resetADDPLANE();
    resetADDPLANE => {
        addPlaneColNumberInput.text = "";
    }
    callback unFocus_INPUTCOL();
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Column number"; font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    addPlaneColNumberInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            addPlaneColNumberInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the column number";
                edited => {
                    if (functionAPP.catchErorrInputNumber(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputNumber(self.text));
                        unFocus_INPUTCOL();
                    }
                    self.text = functionAPP.standardInputNumber(self.text, functionAPP.addPlaneInputColNumber);
                    functionAPP.addPlaneInputColNumber = self.text;
                }
            }
        }
    }
}
component addPlanePage_InputRowPlane inherits Rectangle {
    callback resetADDPLANE();
    resetADDPLANE => {
        inputROWNUMBER.text = "";
    }
    callback unFocus_INPUTROW();
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Row number";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    inputROWNUMBER.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputROWNUMBER := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the row number";
                edited => {
                    if (functionAPP.catchErorrInputNumber(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputNumber(self.text));
                        unFocus_INPUTROW();
                    }
                    self.text = functionAPP.standardInputNumber(self.text, functionAPP.addPlaneInputRowNumber);
                    functionAPP.addPlaneInputRowNumber = self.text;
                }
            }
        }
    }
}
component addPlanePage inherits Rectangle {
    in-out property <int> rs : 0;
    callback unFocusAddPlanePage();
    backBtn := Rectangle {
        width: 100phx;
        height: 50phx;
        background: #c0c0c0;
        x: 12phx;
        y: 0;
        z: 1;
        Image {source: @image-url("../img/3114883.png"); width: 40%;}
        backBtnArea := TouchArea {
            clicked => {
                CONST-FUNCTION-GLOBAL.addingPLANE = false;
                functionAPP.planePage_PlaneHasFocus = -1;
                CONST-FUNCTION-GLOBAL.page_number_SHOW = 2;
            }
        }
        states [
            pressBack when backBtnArea.pressed == true : {
                backBtn.background : rgb(255,255,255);
            }
        ]
    } 
    width: 480phx;
    height:630phx;
    TouchArea {z : 0;}
    background: #FFF; 
    HorizontalLayout {
        padding: 50phx;
        alignment: center;
        VerticalLayout {
            alignment: end;
            spacing: 15phx;
            Rectangle {
                width: 80%;
                height: 20%;
                background: #FDF5E6;
                Rectangle {
                    Text {text: "ADD PLANE";font-size: 30phx; color: black;}
                }
            }
            addPlanePage_InputIDPlane := addPlanePage_InputIDPlane {unFocus_addPlanePage_InputIDPlane => {unFocusAddPlanePage()}}
            addPlanePage_InputTypePlane := addPlanePage_InputTypePlane {unFocus_addPlanePage_InputTypePlane => {unFocusAddPlanePage()}}
            addPlanePage_InputColPlane := addPlanePage_InputColPlane {unFocus_INPUTCOL => {unFocusAddPlanePage()}}
            addPlanePage_InputRowPlane := addPlanePage_InputRowPlane {unFocus_INPUTROW => {unFocusAddPlanePage()}}
            Rectangle {
                x: parent.width / 2 - self.width / 2;
                saveArea:= TouchArea {
                    clicked => {
                        unFocusAddPlanePage();
                        rs = functionAPP.handleDataAdd_PlanePage();
                        if (rs == 1) {
                            addPlanePage-InputColPlane.resetADDPLANE();
                            addPlanePage-InputIDPlane.resetADDPlane();
                            addPlanePage-InputRowPlane.resetADDPLANE();
                            addPlanePage-InputTypePlane.resetADDPLANE();

                            functionAPP.addPlaneInputIdPlane = "";
                            functionAPP.addPlaneInputTypePlane = "";
                            functionAPP.addPlaneInputColNumber = "";
                            functionAPP.addPlaneInputRowNumber = "";
                            
                            CONST-FUNCTION-GLOBAL.page_number_SHOW = 2;
                        }
                    }
                }
                width: 150phx;
                height: 80phx;
                background: red;
                Text {text: "ADD";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when saveArea.pressed : {
                        background: #FFF;
                    }
                ]
            }
        }
    }

    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 6 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 6 : {
            visible : false;
        }
    ]
}

component editPlaneIdPlane inherits Rectangle {
    callback unFocus_editPlaneID();
    callback takeDataFor_editIDPlaneInput();
    takeDataFor_editIDPlaneInput => {
        editPlaneIDInput.text = (functionAPP.PlanePage_PlaneList[functionAPP.PlanePage_editingPlane]).IDPlane;
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "ID Plane";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    editPlaneIDInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            editPlaneIDInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the ID plane";
                edited => {
                    if (functionAPP.catchErorrInputIDPlane(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputIDPlane(self.text));
                        unFocus_editPlaneID();
                    }
                    self.text = functionAPP.standardInputIDPlane(self.text, functionAPP.editIDPlane_var);
                    functionAPP.editIDPlane_var = self.text;
                }
            }
        }
    }
}
component editPlaneTypePlane inherits Rectangle {
    callback unFocus_editTypePlane();
    callback  takeDataFor_editTypePlaneInput();
    takeDataFor_editTypePlaneInput => {
        editPlaneTypeInput.text = (functionAPP.PlanePage_PlaneList[functionAPP.PlanePage_editingPlane]).typePlane;
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Type Plane";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    editPlaneTypeInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            editPlaneTypeInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the type of plane";
                edited => {
                    if (functionAPP.catchErorrInputDes(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDes((self.text)));
                        unFocus_editTypePlane();
                    }
                    self.text = functionAPP.standardInputDes(self.text, functionAPP.editTypePlane_var);
                    functionAPP.editTypePlane_var = self.text;
                    
                }
            }
        }
    }
}
component editPlaneColNumber inherits Rectangle {
    callback unFocusColNumnber();
    callback takeDataFor_editColPlaneInput();
    takeDataFor_editColPlaneInput => {
        editPlaneColNumberInput.text = (functionAPP.PlanePage_PlaneList[functionAPP.PlanePage_editingPlane]).ColNumber;
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Column number"; font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    editPlaneColNumberInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            editPlaneColNumberInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the column number";
                edited => {
                    if (functionAPP.catchErorrInputNumber(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputNumber(self.text));
                        unFocusColNumnber();
                    }
                    self.text = functionAPP.standardInputNumber(self.text, functionAPP.editColNumberPlane_var);
                    functionAPP.editColNumberPlane_var = self.text;
                }
            }
        }
    }
}
component editPlaneRowNumber inherits Rectangle {
    callback unFocusRowNumber();
    callback takeDataFor_editRowPlaneInput();
    takeDataFor_editRowPlaneInput => {
        editPlaneRowNumberPlane.text = (functionAPP.PlanePage_PlaneList[functionAPP.PlanePage_editingPlane]).RowNumber;
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Row number";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    editPlaneRowNumberPlane.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            editPlaneRowNumberPlane := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the row number";
                edited => {
                    if (functionAPP.catchErorrInputNumber(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputNumber(self.text));
                        unFocusRowNumber();
                    }
                    self.text = functionAPP.standardInputNumber(self.text, functionAPP.editRowNumberPlane_var);
                    functionAPP.editRowNumberPlane_var = self.text;
                }
            }
        }
    }
}
component editPlanePage inherits Rectangle {
    callback unFocusEditPlanePage();
    callback takeDataPlanePage_EditPlane_editPlane();
    takeDataPlanePage_EditPlane_editPlane => {
        editPlaneIdPlane.takeDataFor_editIDPlaneInput();
        editPlaneTypePlane.takeDataFor_editTypePlaneInput();
        editPlaneColNumber.takeDataFor_editColPlaneInput();
        editPlaneRowNumber.takeDataFor_editRowPlaneInput();

        functionAPP.editIDPlane_var = functionAPP.PlanePage_PlaneList[functionAPP.PlanePage_editingPlane].IDPlane;
        functionAPP.editTypePlane_var = functionAPP.PlanePage_PlaneList[functionAPP.PlanePage_editingPlane].typePlane;
        functionAPP.editColNumberPlane_var = functionAPP.PlanePage_PlaneList[functionAPP.PlanePage_editingPlane].ColNumber;
        functionAPP.editRowNumberPlane_var = functionAPP.PlanePage_PlaneList[functionAPP.PlanePage_editingPlane].RowNumber;
    }
    backBtn := Rectangle {
        width: 100phx;
        height: 50phx;
        background: rgba(192,192, 192, 0.5);
        x: 12phx;
        y: 0;
        z: 1;
        Image {source: @image-url("../img/3114883.png"); width: 40%;}
        backBtnArea := TouchArea {
            clicked => {
                CONST-FUNCTION-GLOBAL.page_number_SHOW = 2;
                functionAPP.PlanePage_editingPlane = -1;
                functionAPP.planePage_PlaneHasFocus = -1;
                CONST-FUNCTION-GLOBAL.editingPlanePlanePageCONST = -1;
            }
        }
        states [
            pressBack when backBtnArea.pressed == true : {
                backBtn.background : rgb(255,255,255);
            }
        ]
    } 
    width: 480phx;
    height:630phx;
    TouchArea {z : 0;}
    background: rgba(255,255,255, 1); 
    HorizontalLayout {
        padding: 50phx;
        alignment: center;
        VerticalLayout {
            alignment: end;
            spacing: 15phx;
            Rectangle {
                width: 80%;
                height: 20%;
                background: #FDF5E6;
                Rectangle {
                    Text {text: "EDIT PLANE";font-size: 30phx; color: black;}
                }
            }
            editPlaneIdPlane := editPlaneIdPlane {unFocus_editPlaneID => {
                unFocusEditPlanePage();
            }}
            editPlaneTypePlane := editPlaneTypePlane {
                unFocus_editTypePlane => {
                    unFocusEditPlanePage();
                }
            }
            editPlaneColNumber := editPlaneColNumber {
                unFocusColNumnber => {
                    unFocusEditPlanePage();
                }
            }
            editPlaneRowNumber := editPlaneRowNumber {
                unFocusRowNumber => {
                    unFocusEditPlanePage();
                }
            }
            Rectangle {
                x: parent.width / 2 - self.width / 2;
                saveArea:= TouchArea {
                    clicked => {
                        unFocusEditPlanePage();
                        CONST-FUNCTION-GLOBAL.show_confirm_EDIT_PLANE();
                    }
                }
                width: 150phx;
                height: 80phx;
                background: red;
                Text {text: "SAVE";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when saveArea.pressed : {
                        background: #FFF;
                    }
                ]
            }
        }
    }

    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 7 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 7 : {
            visible : false;
        }
    ]
}

// =================================================================================================================================

// FLIGHT

component flightPage_Body_Control_day inherits Rectangle {
    callback unfocus_flightPage_Body_Control_day();
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "DAY";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    day.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            day := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the Day field";
                edited => {
                    // if (functionAPP.catchErorrInputIDPlane(self.text) != "") {
                    //     CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputIDPlane(self.text));
                    //     unFocus_addPlanePage_InputIDPlane();
                    // }
                    // self.text = functionAPP.standardInputIDPlane(self.text, functionAPP.addPlaneInputIdPlane);
                    // functionAPP.addPlaneInputIdPlane = self.text;
                    if (functionAPP.catchErorrInputDay(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDay(self.text));
                        unfocus_flightPage_Body_Control_day();
                    }
                    self.text = functionAPP.standardInputDay(self.text, functionAPP.inputDayFilter_flightPage);
                    functionAPP.inputDayFilter_flightPage = self.text;
                }
            }
        }
    }
}
component flightPage_Body_Control_month inherits Rectangle {
    callback unfocus_flightPage_Body_Control_month();
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "MONTH";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    month.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            month := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the Month field";
                edited => {
                    // if (functionAPP.catchErorrInputIDPlane(self.text) != "") {
                    //     CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputIDPlane(self.text));
                    //     unFocus_addPlanePage_InputIDPlane();
                    // }
                    // self.text = functionAPP.standardInputIDPlane(self.text, functionAPP.addPlaneInputIdPlane);
                    // functionAPP.addPlaneInputIdPlane = self.text;
                    if (functionAPP.catchErorrInputMonth(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputMonth(self.text));
                        unfocus_flightPage_Body_Control_month();
                    }
                    self.text = functionAPP.standardInputMonth(self.text, functionAPP.inputMonthFilter_flightPage);
                    functionAPP.inputMonthFilter_flightPage = self.text;
                }
            }
        }
    }
}
component flightPage_Body_Control_year inherits Rectangle {
    callback unfocus_flightPage_Body_Control_year();
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "YEAR";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    year.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            year := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the Year field";
                edited => {
                    // if (functionAPP.catchErorrInputIDPlane(self.text) != "") {
                    //     CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputIDPlane(self.text));
                    //     unFocus_addPlanePage_InputIDPlane();
                    // }
                    // self.text = functionAPP.standardInputIDPlane(self.text, functionAPP.addPlaneInputIdPlane);
                    // functionAPP.addPlaneInputIdPlane = self.text;
                    if (functionAPP.catchErorrInputYear(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputYear(self.text));
                        unfocus_flightPage_Body_Control_year();
                    }
                    self.text = functionAPP.standardInputYear(self.text, functionAPP.inputYearFilter_flightPage);
                    functionAPP.inputYearFilter_flightPage = self.text;
                }
            }
        }
    }
}
component flightPage_Body_Control_des inherits Rectangle {
    callback unfocus_flightPage_Body_Control_des();
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "DESTINATION";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    des.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            des := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the Destination field";
                edited => {
                    // if (functionAPP.catchErorrInputIDPlane(self.text) != "") {
                    //     CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputIDPlane(self.text));
                    //     unFocus_addPlanePage_InputIDPlane();
                    // }
                    // self.text = functionAPP.standardInputIDPlane(self.text, functionAPP.addPlaneInputIdPlane);
                    // functionAPP.addPlaneInputIdPlane = self.text;
                    if (functionAPP.catchErorrInputDes(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDes(self.text));
                        unfocus_flightPage_Body_Control_des();
                    }
                    self.text = functionAPP.standardInputDes(self.text, functionAPP.inputDesFilter_flightPage);
                    functionAPP.inputDesFilter_flightPage = self.text;
                }
            }
        }
    }
}
component flightPage_Body_Control_FILTER inherits Rectangle {
    callback unfocus_flightPage_Body_Control_FILTER();
    height: 100phx;
    VerticalLayout {
        alignment:center;
        HorizontalLayout {
            alignment: center;
            spacing: 12px;
            FindBtn := Rectangle {
                findArea:= TouchArea {
                    clicked => {
                        functionAPP.handleFilter_search_flightPage();
                        unfocus_flightPage_Body_Control_FILTER();
                    }
                }
                width: 140phx;
                height: 80phx;
                background: red;
                Text {text: "Find";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when findArea.pressed : {
                        FindBtn.background: #FFF;
                    }
                ]
            }
            BOOKBtn := Rectangle {
                BOOKArea:= TouchArea {
                    clicked => {
                        ticket-global.chose_ticketSeat = -1;
                        ticket-global.chose_ticketSeatTmp = -1;
                        ticket-global.chose_ticketFunction = 0;
                        ticket-global.book_information_idCard = "";
                        ticket-global.book_information_firstName = "Enter the First name";
                        ticket-global.book_information_lastName = "Enter the last name";
                        ticket-global.book_information_sex = "Enter the Sex";
                        ticket-global.chose_sex = 0;
                        if (functionAPP.flightHASFOCUS_flightPage == -1) {
                            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("Must choose 1 flight");
                        }
                        else {
                            if (functionAPP.flightLIST_flightPage[functionAPP.flightHASFOCUS_flightPage].state == 1) {
                                functionAPP.handleBookFlight();
                                CONST-FUNCTION-GLOBAL.page_number_SHOW = 4;
                                ticket-global.chose_function_passengerListFlight_ticket = 1;
                            }
                            else {
                                if (functionAPP.flightLIST_flightPage[functionAPP.flightHASFOCUS_flightPage].state == 0) {
                                    CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("The flight has been canceled");
                                }
                                if (functionAPP.flightLIST_flightPage[functionAPP.flightHASFOCUS_flightPage].state == 3) {
                                    CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("The flight has been completed");
                                }
                                if (functionAPP.flightLIST_flightPage[functionAPP.flightHASFOCUS_flightPage].state == 2) {
                                    CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("The flight has departed");
                                }
                            }
                            // nut bam dat ve
                        }
                        unfocus_flightPage_Body_Control_FILTER();
                    }
                }
                width: 140phx;
                height: 80phx;
                background: red;
                Text {text: "BOOK";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when BOOKArea.pressed : {
                        BOOKBtn.background: #FFF;
                    }
                ]
            }
        }
    }
}
component flightPage_Body_Control_Button inherits Rectangle {
    in property <string> rs : "";
    callback unfocus_flightPage_Body_Control_Button();
    callback takeData_flightPage_Body_Control_Button();
    height: 100phx;
    VerticalLayout {
        alignment:end;
        HorizontalLayout {
            alignment: space-between;
            editBtn := Rectangle {
                editArea:= TouchArea {
                    clicked => {
                        if (functionAPP.flightHASFOCUS_flightPage != -1) {
                            functionAPP.flightHasEDITING_flightPage = functionAPP.flightHASFOCUS_flightPage;
                            if (functionAPP.checkFlightCanEdit(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].flightCode) == true) {
                                CONST-FUNCTION-GLOBAL.editingFlight = true;
                                takeData_flightPage_Body_Control_Button();
                                CONST-FUNCTION-GLOBAL.page_number_SHOW = 13;
                            }
                            else {
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("Flight completed/cancelled");
                                functionAPP.flightHasEDITING_flightPage = -1;
                            }
                        }
                        else {
                            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("You must choose 1 flight");
                        }
                        unfocus_flightPage_Body_Control_Button();
                    }
                }
                width: 140phx;
                height: 80phx;
                background: red;
                Text {text: "Edit flight";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when editArea.pressed : {
                        editBtn.background: #FFF;
                    }
                ]
            }
            ADDBtn := Rectangle {
                AddArea:= TouchArea {
                    clicked => {
                        CONST-FUNCTION-GLOBAL.page_number_SHOW = 12;
                        functionAPP.flightHASFOCUS_flightPage = -1;
                        CONST-FUNCTION-GLOBAL.addingFlight = true;
                        unfocus_flightPage_Body_Control_Button();
                    }
                }
                width: 140phx;
                height: 80phx;
                background: red;
                Text {text: "Add flight";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when AddArea.pressed : {
                        ADDBtn.background: #FFF;
                    }
                ]
            }
            CancelBtn := Rectangle {
                in-out property <int> rsCheck : 0;
                cancelArea:= TouchArea {
                    clicked => {
                        if (functionAPP.flightHASFOCUS_flightPage == -1) {
                            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("Please select 1 flight");
                        }
                        else {
                            rsCheck = functionAPP.checkFlightToCancel(functionAPP.flightLIST_flightPage[functionAPP.flightHASFOCUS_flightPage].flightCode);
                            if (rsCheck == 0) {
                                CONST-FUNCTION-GLOBAL.show_confirm_cancelFlight();
                            }
                            else {
                                if (rsCheck == 1) {
                                    CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("The flight was cancelled");
                                }
                                else {
                                    CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("The flight has been completed");
                                }
                            }
                        }

                    }
                }
                width: 140phx;
                height: 80phx;
                background: red;
                Text {text: "Cancel flight";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when cancelArea.pressed : {
                        CancelBtn.background: #FFF;
                    }
                ]
            }
        }
    }
}
component flightPage_Body_Control inherits Rectangle {
    callback unfocus_flightPage_Body_Control();
    callback takeDATA_flightPage_Body_Control();
    background: rgba(255,255,255,1);
    // background: red;
    border-width: 7phx;
    border-color: rgba(255,255,255,0.8);
    VerticalLayout {
        spacing : 15px;
        alignment: center;
        padding: 20phx;
        padding-top: 0phx;
        Rectangle {
            width: 100%; height : 100phx; background: transparent;
            Text {text: "CONTROL";color: black;font-weight: 700; font-size: 28phx;}
        }
        flightPage-Body-Control_day {}
        flightPage-Body-Control-month {}
        flightPage-Body-Control-year {}
        flightPage-Body-Control-des {}

        flightPage-Body-Control-FILTER {
            unfocus_flightPage_Body_Control_FILTER => {
                unfocus_flightPage_Body_Control();
            }
        }
        flightPage-Body-Control-Button {
            unfocus_flightPage_Body_Control_Button => {
                unfocus_flightPage_Body_Control();
            }
            takeData_flightPage_Body_Control_Button => {
                takeDATA_flightPage_Body_Control();
            }
        }
    }
}
component flightPage_Body_ItemPlane inherits Rectangle {
    callback unfocus_flightPage_Body_ItemPlane();
    in-out property <int> stt;
    in-out property <string> flightCode;
    in-out property <string> departure;
    in-out property <string> destination;
    in-out property <int> status;
    in-out property <string> planeCode;
    in-out property <int> ticketBooked;
    in-out property <int> totalTicket;
    drop-shadow-blur: 5phx;
    width: 100%;
    height: 40phx;
    background: rgba(255,255,255,0.9);
    itemArea := TouchArea {
        clicked => {
            functionAPP.flightHASFOCUS_flightPage = stt - 1;
            unfocus_flightPage_Body_ItemPlane();
        }
    }
    HorizontalLayout {
        alignment: space-around;
        Rectangle {width: 5%;  height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: @tr("#{}", stt); color : black;}}
        Rectangle {width: 15%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: flightCode; color : black;}}
        Rectangle {width: 15%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: departure; color : black;}}
        Rectangle {width: 18%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: destination; color : black;}}
        Rectangle {width: 15%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: planeCode; color : black;}}
        stateElement := Rectangle {width: 16%; height: 100%; border-width: 3phx; border-color: whitesmoke; textStatus := Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: (status == 0) ? "CANCEL" : ((status == 1) ? "AVAILABLE" : ((status == 2) ? "UNAVAILABLE" : "COMPLETE")); color : black;}}
        Rectangle {width: 14%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: @tr("{}/{}", ticketBooked, totalTicket); color : black;}}
    }
    states [
        editing when (functionAPP.flightHasEDITING_flightPage == stt - 1) : {
            background : #757575;
        }
        hasPress when itemArea.pressed == true : {
            background : #c0c0c0;
        }
        hasHover_cancel when itemArea.has-hover && status == 0 : {
            background : #dfdfdf;
            textStatus.color : rgb(255,0,0);
        }
        hasHover_complete when itemArea.has-hover && status == 3 : {
            background : #dfdfdf;
            textStatus.color : green;
        }
        hasHover when itemArea.has-hover : {
            background : #dfdfdf;
        }
        hassFocus_CANCEL when (functionAPP.flightHASFOCUS_flightPage == stt - 1 && status == 0) : {
            background : #a1a1a1;
            textStatus.color: red;
        }
        hassFocus_COMPLETE when (functionAPP.flightHASFOCUS_flightPage == stt - 1 && status == 3) : {
            background : #a1a1a1;
            textStatus.color : green;
        }
        hassFocus when (functionAPP.flightHASFOCUS_flightPage == stt - 1) : {
            background : #a1a1a1;
        }

        cancell when status == 0 : {
            textStatus.color : red;
        }
        compelee when status == 3 : {
            textStatus.color : green;
        }
    ]
}
component flightPage_Body_ListPlane inherits Rectangle {
    callback unfocus_flightPage_Body_ListPlane();
    VerticalLayout {
        VerticalLayout {
            padding: 4px;
            Rectangle {
                drop-shadow-blur: 5phx;
                drop-shadow-color: #333;
                drop-shadow-offset-y: 2phx;
                width: 100%;
                height: 40phx;
                background: #333;
                HorizontalLayout {
                    alignment: space-around;
                    Rectangle {width: 5%;  height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "STT";}}
                    Rectangle {width: 15%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Flight Code";}}
                    Rectangle {width: 15%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Departure";}}
                    Rectangle {width: 18%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Destination";}}
                    Rectangle {width: 15%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Plane Code";}}
                    Rectangle {width: 16%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "State";}}
                    Rectangle {width: 14%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Ticket Booked";}}
                }
            }
        }
        ListView {
            width: 100%;
            for data[index] in functionAPP.flightLIST_flightPage : VerticalLayout {
                padding: 1phx;
                item := flightPage-Body-ItemPlane {
                    unfocus_flightPage_Body_ItemPlane => {
                        unfocus_flightPage_Body_ListPlane();
                    }
                    stt: index + 1;
                    flightCode: data.flightCode;
                    departure: data.departure;
                    destination: data.destination;
                    planeCode: data.planeCode;
                    status: data.state;
                    ticketBooked: data.numberOfTicket-BOOKED;
                    totalTicket: data.totalTicket;
                }
            }
        }
    }
}
component flightPage_Body inherits Rectangle{
    callback unfocus_flightPage_Body();
    callback takeDATA_flightPage_Body();
    height: (CONST-FUNCTION-GLOBAL.MAX_HEIGHT * 0.92)* 0.865;
    border-width: 10phx;
    border-color: rgba(255,255,255,0.4);
    border-radius: 12phx;
    VerticalLayout {
        padding: 34phx;
        vertical-stretch: 1;
        HorizontalLayout {
            spacing: 12phx;
            Rectangle {
                horizontal-stretch: 7;
                if functionAPP.numberOfFlightList_flightPage != 0 : flightPage_Body_ListPlane {
                    unfocus_flightPage_Body_ListPlane => {
                        unfocus_flightPage_Body();
                    }
                }
                if functionAPP.numberOfFlightList_flightPage == 0 : Rectangle {
                    background: rgba(255,255, 255, 0.2);
                    border-color: white;
                    border-width: 10phx;
                    Text {
                        text: "There is no Flight";
                        font-size: 30phx;
                        color : white;
                    }
                }
            }
            Rectangle {
                horizontal-stretch: 3;
                flightPage-Body-Control {
                    unfocus_flightPage_Body_Control => {
                        unfocus_flightPage_Body();
                    }
                    takeDATA_flightPage_Body_Control => {
                        takeDATA_flightPage_Body();
                    }
                }
            }
        }
    }
}
component flightPage_Header_Search inherits Rectangle {
    callback unfocus_flightPage_Header_Search();
    border-width: 4phx;
    border-color: rgba(255,255,255,0.4);
    width: 400phx;
    TouchArea {clicked => {input.focus()}}
    VerticalLayout {
        alignment: center;
        HorizontalLayout {
            alignment: center;
            spacing: 12phx;
            Rectangle {
                Text {text: "#ID Flight";color: white;font-weight: 700;font-size: 16phx;}
            }
            Rectangle {
                background: gray;
                height: 40phx;
                width: 250phx;
                input := LineEdit {
                    enabled: true;
                    width: 100%;
                    height: 100%;
                    placeholder-text: "Enter ID Flight";
                    horizontal-alignment: center;
                    font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                    edited => {
                        if (functionAPP.catchErorrInputFlightCodeSearch(self.text) != "") {
                            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputFlightCodeSearch(self.text));
                            unfocus_flightPage_Header_Search();
                        }
                        self.text = functionAPP.standardInputFlightCodeSearch(self.text, functionAPP.flightSearch_flightPage);
                        functionAPP.flightSearch_flightPage = self.text;
                        functionAPP.handleFilter_search_flightPage();
                        functionAPP.flightHASFOCUS_flightPage = -1;
                    }
                    states [
                        unabled_ when CONST-FUNCTION-GLOBAL.page_number_SHOW == 13 || functionAPP.Filter_by_time_period == true: {
                            enabled : false;
                        }
                        enabled_ when CONST-FUNCTION-GLOBAL.page_number_SHOW != 13 && functionAPP.Filter_by_time_period != true: {
                            enabled : true;
                        }
                    ]
                }
            }
        }
    }
}
component flightPage_header_sort inherits Rectangle {
    callback unfocus_flightPage_header_sort();
    width: 700phx;
    VerticalLayout {
        HorizontalLayout {
            spacing: 8phx;
            Rectangle {
                Text {text : "S_ID"; color : white;font_weight : 700;font-size : 18phx;}
                Area_ID := TouchArea {
                    clicked => {
                        if (functionAPP.flightHasEDITING_flightPage == -1) {
                            if (functionAPP.modeSearch_flightPage == 1) {
                                functionAPP.modeSearch_flightPage = 0;
                            }
                            else {
                                functionAPP.modeSearch_flightPage = 1;
                                functionAPP.sortFlightList_BYID();
                            }
                            functionAPP.flightHASFOCUS_flightPage = -1;
                        }
                        unfocus_flightPage_header_sort();
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                states [
                    A when Area-ID.pressed : {
                        opacity: 0.5;
                    }
                    Y when functionAPP.modeSearch_flightPage == 1 : {
                        background : red;
                    }
                ]
            }   
            Rectangle {
                Text {text : "S_Time"; color : white;font_weight : 700;font-size : 18phx;}
                Area_Time := TouchArea {
                    clicked => {
                        if (functionAPP.flightHasEDITING_flightPage == -1) {
                            if (functionAPP.modeSearch_flightPage == 2) {
                                functionAPP.modeSearch_flightPage = 0;
                            }
                            else {
                                functionAPP.sortFlightList_BYTIME();
                                functionAPP.modeSearch_flightPage = 2;
                            }
                            functionAPP.flightHASFOCUS_flightPage = -1;
                        }
                        unfocus_flightPage_header_sort();
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                states [
                    A when Area-Time.pressed : {
                        opacity: 0.5;
                    }
                    Y when functionAPP.modeSearch_flightPage == 2 : {
                        background : red;
                    }
                ]
            } 
            Rectangle {
                textBox := Text {text : "Filter by time period"; color : #333;font_weight : 700;font-size : 18phx;}
                Area_FILTER := TouchArea {
                    clicked => {
                        functionAPP.Filter_by_time_period = true;
                        functionAPP.day_startFlight = "";
                        functionAPP.month_startFlight = "";
                        functionAPP.year_startFlight = "";

                        functionAPP.day_endFlight = "";
                        functionAPP.month_endFlight = "";
                        functionAPP.year_endFlight = "";

                        unfocus_flightPage_header_sort();
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: #c0c0c0;
                states [
                    A when Area-FILTER.pressed : {
                        opacity: 0.5;
                    }
                    B when functionAPP.Filter_by_time_period == true : {
                        background : red;
                        textBox.color : white;
                    }
                ]
            } 
        }
    }
}
component flightPage_Header inherits Rectangle {
    callback unfocus_flightPage_Header();
    VerticalLayout {
        alignment: center;
        HorizontalLayout {
            spacing: 12px;
            alignment: space-between;
            padding: 4phx;
            padding-left: 0;
            flightPage_Header_Search := flightPage_Header_Search {
                height: 100%;
                unfocus_flightPage_Header_Search => {
                    unfocus_flightPage_Header();
                }
            }
            flightPage_header_sort {
                unfocus_flightPage_header_sort => {
                    unfocus_flightPage_Header();
                }
            }
        }
    }
}
component flightPage inherits Rectangle {
    callback takeDATA_flightPage();
    callback unfocus_flightPage();
    VerticalLayout {
        padding: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND;
        padding-top: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND / 2;
        padding-bottom: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND / 4;
        flightPage-Header {
            unfocus_flightPage_Header => {
                unfocus_flightPage();
            }
        }
        flightPage_Body {
            unfocus_flightPage_Body => {
                unfocus_flightPage();
            }
            takeDATA_flightPage_Body => {
                takeDATA_flightPage();
            }
        }
    }
    if (functionAPP.Filter_by_time_period == true) : Rectangle {
        back := Rectangle {
            x : 20px;
            y : 20px;
            z : 12;
            background: #c0c0c0;
            width: 80px;
            height: 35px;
            Text {text: "BACK";font-size: 16phx; font-weight: 700; color: black;}
            TouchArea {
                clicked => {
                    functionAPP.Filter_by_time_period = false;
                }
            }
        }
        x: 1285phx;
        y : 141phx;
        width: 501px;
        height: 728phx;
        background: white;
        TouchArea {z : 10; }
        FocusScope {z : 11;}
        VerticalLayout {
            z: 12;
            padding: 20phx;
            padding-top: 100phx;
            HorizontalLayout {
                alignment: center;
                Rectangle {
                    width: 80%;
                    height: 70phx;
                    Text {text: "START"; color: black; font-size: 20px; font-weight: 700; horizontal-alignment: center; vertical-alignment: center;}
                }
            }
            HorizontalLayout {
                alignment: space-between;
                Rectangle {
                    width: 30%;
                    height: 50phx;
                    background: white;
                    Text {text: "DAY"; color : black; font-weight: 700;font-size: 16phx; vertical-alignment: center; horizontal-alignment: center;}
                }
                Rectangle {
                    width: 30%;
                    height: 50phx;
                    background: white;
                    Text {text: "MONTH"; color : black; font-weight: 700;font-size: 16phx; vertical-alignment: center; horizontal-alignment: center;}
                }
                Rectangle {
                    width: 30%;
                    height: 50phx;
                    background: white;
                    Text {text: "YEAR"; color : black; font-weight: 700;font-size: 16phx; vertical-alignment: center; horizontal-alignment: center;}
                }
            }
            HorizontalLayout {
                alignment: space-between;
                Rectangle {
                    width: 150phx;
                    height: 50phx;
                    background: #c0c0c0;
                    LineEdit {
                        horizontal-alignment: center;
                        font-size: 16phx;
                        height: 100%;
                        placeholder-text: "DAY";
                        edited => {             
                            if (functionAPP.catchErorrInputDay(self.text) != "") {
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDay(self.text));
                                unfocus_flightPage();
                            }               
                            self.text = functionAPP.standardInputDay(self.text, functionAPP.day_startFlight);
                            functionAPP.day_startFlight = self.text;
                        }
                    }
                }
                Rectangle {
                    width: 150phx;
                    height: 50phx;
                    background: #c0c0c0;
                    LineEdit {
                        horizontal-alignment: center;
                        font-size: 16phx;
                        height: 100%;
                        placeholder-text: "MONTH";
                        edited => {
                            if (functionAPP.catchErorrInputMonth(self.text) != "") {
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputMonth(self.text));
                                unfocus_flightPage();
                            }               
                            self.text = functionAPP.standardInputMonth(self.text, functionAPP.month_startFlight);
                            functionAPP.month_startFlight = self.text;
                        }
                    }
                }
                Rectangle {
                    width: 150phx;
                    height: 50phx;
                    background: #c0c0c0;
                    LineEdit {
                        horizontal-alignment: center;
                        font-size: 16phx;
                        height: 100%;
                        placeholder-text: "YEAR";
                        edited => {
                            if (functionAPP.catchErorrInputYear(self.text) != "") {
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputYear(self.text));
                                unfocus_flightPage();
                            }               
                            self.text = functionAPP.standardInputYear(self.text, functionAPP.year_startFlight);
                            functionAPP.year_startFlight = self.text;
                        }
                    }
                }
            }
            HorizontalLayout {
                alignment: center;
                Rectangle {
                    width: 80%;
                    height: 30phx;
                }
            }
            HorizontalLayout {
                alignment: center;
                Rectangle {
                    width: 80%;
                    height: 70phx;
                    Text {text: "END"; color: black; font-size: 20px; font-weight: 700; horizontal-alignment: center; vertical-alignment: center;}
                }
            }
            HorizontalLayout {
                alignment: space-between;
                Rectangle {
                    width: 30%;
                    height: 50phx;
                    background: white;
                    Text {text: "DAY"; color : black; font-weight: 700;font-size: 16phx; vertical-alignment: center; horizontal-alignment: center;}
                }
                Rectangle {
                    width: 30%;
                    height: 50phx;
                    background: white;
                    Text {text: "MONTH"; color : black; font-weight: 700;font-size: 16phx; vertical-alignment: center; horizontal-alignment: center;}
                }
                Rectangle {
                    width: 30%;
                    height: 50phx;
                    background: white;
                    Text {text: "YEAR"; color : black; font-weight: 700;font-size: 16phx; vertical-alignment: center; horizontal-alignment: center;}
                }
            }
            HorizontalLayout {
                alignment: space-between;
                Rectangle {
                    width: 150phx;
                    height: 50phx;
                    background: #c0c0c0;
                    LineEdit {
                        horizontal-alignment: center;
                        font-size: 16phx;
                        height: 100%;
                        placeholder-text: "DAY";
                        edited => {
                            if (functionAPP.catchErorrInputDay(self.text) != "") {
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDay(self.text));
                                unfocus_flightPage();
                            }               
                            self.text = functionAPP.standardInputDay(self.text, functionAPP.day_endFlight);
                            functionAPP.day_endFlight = self.text;
                        }
                    }
                }
                Rectangle {
                    width: 150phx;
                    height: 50phx;
                    background: #c0c0c0;
                    LineEdit {
                        horizontal-alignment: center;
                        font-size: 16phx;
                        height: 100%;
                        placeholder-text: "MONTH";
                        edited => {
                            if (functionAPP.catchErorrInputMonth(self.text) != "") {
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputMonth(self.text));
                                unfocus_flightPage();
                            }               
                            self.text = functionAPP.standardInputMonth(self.text, functionAPP.month_endFlight);
                            functionAPP.month_endFlight = self.text;
                        }
                    }
                }
                Rectangle {
                    width: 150phx;
                    height: 50phx;
                    background: #c0c0c0;
                    LineEdit {
                        horizontal-alignment: center;
                        font-size: 16phx;
                        height: 100%;
                        placeholder-text: "YEAR";
                        edited => {
                            if (functionAPP.catchErorrInputYear(self.text) != "") {
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputYear(self.text));
                                unfocus_flightPage();
                            }               
                            self.text = functionAPP.standardInputYear(self.text, functionAPP.year_endFlight);
                            functionAPP.year_endFlight = self.text;
                        }
                    }
                }
            }
            HorizontalLayout {
                alignment: center;
                Rectangle {
                    width: 80%;
                    height: 70phx;
                }
            }
            HorizontalLayout {
                alignment: center;
                Rectangle {
                    width: 30%;
                    height: 70phx;
                    background: red;
                    border-color: black;
                    border-width: 5phx;
                    Text {
                        text: "FILTER";
                        font-size: 18phx;
                        font-weight: 700;
                        color: black;
                    }
                    areaBut := TouchArea {
                        clicked => {
                            if (functionAPP.flightHasEDITING_flightPage == -1) {
                                functionAPP.handleFilter_period();
                                unfocus_flightPage();
                                functionAPP.flightHASFOCUS_flightPage = -1;
                            }
                        }
                    }
                    states [
                        click when areaBut.pressed == true : {
                            background : white;
                        }
                    ]
                }
            }
        }
    }
    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 1 || CONST-FUNCTION-GLOBAL.page_number_SHOW == 12 || CONST-FUNCTION-GLOBAL.page_number_SHOW == 13 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 1 && CONST-FUNCTION-GLOBAL.page_number_SHOW != 12 && CONST-FUNCTION-GLOBAL.page_number_SHOW != 13: {
            visible : false;
        }
    ]
}
// 

// add flight
component addFlightPage_InputIDFlight inherits Rectangle {
    // callback resetADDPlane();
    // resetADDPlane => {
    //     addPlaneIDInput.text = "";
    // }
    callback reset();
    reset => {
        addFlightIDInput.text = "";
    }
    callback unfocus_addFlightPage_InputIDFlight();
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "Flight Code";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    addFlightIDInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            addFlightIDInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the Flight Code";
                edited => {
                    if (functionAPP.catchErorrInputFlightCode(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputFlightCode(self.text));
                        unfocus_addFlightPage_InputIDFlight();
                    }
                    self.text = functionAPP.standardInputFlightCode(self.text, functionAPP.flightCode_ADDFLIGHT);
                    functionAPP.flightCode_ADDFLIGHT = self.text;
                }
            }
        }
    }
}
component addFlightPage_InputDay inherits Rectangle {
    // callback resetADDPLANE();
    // resetADDPLANE => {
    //     addPlaneTypeInput.text = "";
    // }
    callback reset();
    reset => {
        addFlightDAYInput.text = "";
    }
    callback unfocus_addFlightPage_InputDay();
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #00CCFF;
            Text {text: "DAY";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    addFlightDAYInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            addFlightDAYInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Day field";
                edited => {
                    if (functionAPP.catchErorrInputDay(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDay(self.text));
                        unfocus_addFlightPage_InputDay();
                    }
                    self.text = functionAPP.standardInputDay(self.text, functionAPP.day_ADDFLIGHT);
                    functionAPP.day_ADDFLIGHT = self.text;
                }
            }
        }
    }
}
component addFlightPage_InputMONTH inherits Rectangle {
    // callback resetADDPLANE();
    // resetADDPLANE => {
    //     addPlaneColNumberInput.text = "";
    // }
    callback reset();
    reset => {
        addFlightMonthInput.text = "";
    }
    callback unfocus_addFlightPage_InputMONTH();
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #00CCFF;
            Text {text: "MONTH"; font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    addFlightMonthInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            addFlightMonthInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Month field";
                edited => {
                    if (functionAPP.catchErorrInputMonth(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputMonth(self.text));
                        unfocus_addFlightPage_InputMONTH();
                    }
                    self.text = functionAPP.standardInputMonth(self.text, functionAPP.month_ADDFLIGHT);
                    functionAPP.month_ADDFLIGHT = self.text;
                }
            }
        }
    }
}
component addFlightPage_InputYEAR inherits Rectangle {
    callback reset();
    reset => {
        inputYEAR.text = "";
    }
    callback unfocus_addFlightPage_InputYEAR();
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #00CCFF;
            Text {text: "YEAR";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    inputYEAR.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputYEAR := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Year field";
                edited => {
                    if (functionAPP.catchErorrInputYear(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputYear(self.text));
                        unfocus_addFlightPage_InputYEAR();
                    }
                    self.text = functionAPP.standardInputYear(self.text, functionAPP.year_ADDFLIGHT);
                    functionAPP.year_ADDFLIGHT = self.text;
                }
            }
        }
    }
}
component addFlightPage_InputHour inherits Rectangle {
    callback reset();
    reset => {
        inputHour.text = "";
    }
    callback unfocus_addFlightPage_InputHour();
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #FF9933;
            Text {text: "HOUR";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    inputHour.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputHour := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Hour field";
                edited => {
                    if (functionAPP.catchErorrInputHour(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputHour(self.text));
                        unfocus_addFlightPage_InputHour();
                    }
                    self.text = functionAPP.standardInputHour(self.text, functionAPP.hour_ADDFLIGHT);
                    functionAPP.hour_ADDFLIGHT = self.text;
                }
            }
        }
    }
}
component addFlightPage_InputMinute inherits Rectangle {
    callback reset();
    reset => {
        inputMinute.text = "";
    }
    callback unfocus_addFlightPage_InputMinute();
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #FF9933;
            Text {text: "Minute";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    inputMinute.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputMinute := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Minute field";
                edited => {
                    if (functionAPP.catchErorrInputMinute(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputMinute(self.text));
                        unfocus_addFlightPage_InputMinute();
                    }
                    self.text = functionAPP.standardInputMinute(self.text, functionAPP.minute_ADDFLIGHT);
                    functionAPP.minute_ADDFLIGHT = self.text;
                }
            }
        }
    }
}
component addFlightPage_InputDES inherits Rectangle {
    callback reset();
    reset => {
        inputDES.text = "";
    }
    callback unfocus_addFlightPage_InputDES();
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "DESTINATION";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    inputDES.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputDES := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Destination field";
                edited => {
                    if (functionAPP.catchErorrInputDes(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDes(self.text));
                        unfocus_addFlightPage_InputDES();
                    }
                    self.text = functionAPP.standardInputDes(self.text, functionAPP.des_ADDFLIGHT);
                    functionAPP.des_ADDFLIGHT = self.text;
                }
            }
        }
    }
}
component addFlightPage_CHOOSEPLANE inherits Rectangle {
    callback reset();
    callback unfocus_addFlightPage_CHOOSEPLANE();
    in-out property <string> idPlaneHasChoose <=> functionAPP.idPlaneHasChooseForFlight;
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: red;
            border-color: #333;
            border-width: 2px;
            border-radius: 4px;
            Text {text: "Choose Plane";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center; font-weight: 700; color: black;}
            areaCHOOSE := TouchArea {
                clicked => { 
                    CONST-FUNCTION-GLOBAL.modeChoosePlaneTOMakeFlight = true;
                    CONST-FUNCTION-GLOBAL.page_number_SHOW = 2;
                }
            }
            states [
                click when areaCHOOSE.pressed : {
                    background : white;
                }
            ]
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            idPlane := Text {
                text: idPlaneHasChoose;
                font-size: 20px;
            }
        }
    }
}
component addFlightPage inherits Rectangle {
    callback unfocus_addFlightPage();
    in-out property <int> rs : 0;
    backBtn := Rectangle {
        width: 100phx;
        height: 30phx;
        background: #c0c0c0;
        x: 12phx;
        y: 0;
        z: 1;
        Text {text: "BACK"; font-weight: 700;font-size: 16px; color: black;}
        backBtnArea := TouchArea {
            clicked => {
                CONST-FUNCTION-GLOBAL.addingFlight = false;
                functionAPP.flightHASFOCUS_flightPage = -1;
                CONST-FUNCTION-GLOBAL.page_number_SHOW = 1;
            }
        }
        states [
            pressBack when backBtnArea.pressed == true : {
                backBtn.background : rgb(255,255,255);
            }
        ]
    } 
    width: 480phx;
    height:690phx;
    y: 150phx;
    TouchArea {z : 0;}
    background: #FFF; 
    HorizontalLayout {
        padding: 50phx;
        alignment: center;
        VerticalLayout {
            alignment: end;
            spacing: 15phx;
            Rectangle {
                width: 80%;
                height: 15%;
                background: #FDF5E6;
                Rectangle {
                    Text {text: "ADD FLIGHT";font-size: 30phx; color: black; font-weight: 700;}
                }
            }
            addFlightPage-InputIDFlight := addFlightPage-InputIDFlight {
                unfocus_addFlightPage_InputIDFlight => {
                    unfocus_addFlightPage();
                }
            }
            addFlightPage-InputDay := addFlightPage-InputDay {
                unfocus_addFlightPage_InputDay => {
                    unfocus_addFlightPage();
                }
            }
            addFlightPage-InputMONTH := addFlightPage-InputMONTH {
                unfocus_addFlightPage_InputMONTH => {
                    unfocus_addFlightPage();
                }
            }
            addFlightPage-InputYEAR := addFlightPage-InputYEAR {
                unfocus_addFlightPage_InputYEAR => {
                    unfocus_addFlightPage();
                }
            }
            addFlightPage_InputHour := addFlightPage-InputHour{
                unfocus_addFlightPage_InputHour => {
                    unfocus_addFlightPage();
                }
            }
            addFlightPage_InputMinute := addFlightPage-InputMinute{
                unfocus_addFlightPage_InputMinute => {
                    unfocus_addFlightPage();
                }
            }
            addFlightPage-InputDES := addFlightPage-InputDES {
                unfocus_addFlightPage_InputDES => {
                    unfocus_addFlightPage();
                }
            }
            addFlightPage-CHOOSEPLANE := addFlightPage-CHOOSEPLANE {
                unfocus_addFlightPage_CHOOSEPLANE => {
                    unfocus_addFlightPage();
                }
            }
            Rectangle {
                x: parent.width / 2 - self.width / 2;
                saveArea:= TouchArea {
                    clicked => {
                        rs = functionAPP.handleADDFLIGHT();
                        if (rs == 1) {
                            addFlightPage-InputIDFlight.reset();
                            addFlightPage-InputDay.reset();
                            addFlightPage-InputMONTH.reset();
                            addFlightPage-InputYEAR.reset();
                            addFlightPage-InputDES.reset();
                            addFlightPage-InputHour.reset();
                            addFlightPage-InputMinute.reset();

                            functionAPP.idPlaneHasChooseForFlight = "";

                            functionAPP.flightCode_ADDFLIGHT = "";
                            functionAPP.day_ADDFLIGHT = "";
                            functionAPP.month_ADDFLIGHT = "";
                            functionAPP.year_ADDFLIGHT = "";
                            functionAPP.des_ADDFLIGHT = "";
                            functionAPP.hour_ADDFLIGHT = "";
                            functionAPP.minute_ADDFLIGHT = "";

                            CONST-FUNCTION-GLOBAL.page_number_SHOW = 1;
                            CONST-FUNCTION-GLOBAL.addingFlight = false;
                        }
                        unfocus_addFlightPage();
                    }
                }
                width: 150phx;
                height: 80phx;
                background: red;
                Text {text: "ADD";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when saveArea.pressed : {
                        background: #FFF;
                    }
                ]
            }
        }
    }

    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 12 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 12 : {
            visible : false;
        }
    ]
}

// EDIT FLIGHT
component editFlightPage_InputIDFlight inherits Rectangle {
    callback takeData_editFlightPage_InputIDFlight();
    callback unfocus_editFlightPage_InputIDFlight();
    takeData_editFlightPage_InputIDFlight => {
        editFlightIDInput.text = functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].flightCode;
    }
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "Flight Code";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    editFlightIDInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            editFlightIDInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the Flight Code";
                edited => {
                    if (functionAPP.catchErorrInputFlightCode(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputFlightCode(self.text));
                        unfocus_editFlightPage_InputIDFlight();
                    }
                    self.text = functionAPP.standardInputFlightCode(self.text, functionAPP.newFlightCODE_editFlight);
                    functionAPP.newFlightCODE_editFlight = self.text;
                }
            }
        }
    }
}
component editFlightPage_InputDay inherits Rectangle {  
    callback takeData_editFlightPage_InputDay();
    callback unfocus_editFlightPage_InputDay();
    takeData_editFlightPage_InputDay => {
        editFlightDAYInput.text = functionAPP.getDayFromStringTime(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].departure);
    }
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #00CCFF;
            Text {text: "DAY";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    editFlightDAYInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            editFlightDAYInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Day field";
                edited => {
                    if (functionAPP.catchErorrInputDay(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDay(self.text));
                        unfocus_editFlightPage_InputDay();
                    }
                    self.text = functionAPP.standardInputDay(self.text, functionAPP.newDay_editFlight);
                    functionAPP.newDay_editFlight = self.text;
                }
            }
        }
    }
}
component editFlightPage_InputMONTH inherits Rectangle {
    callback takeData_editFlightPage_InputMONTH();
    callback unfocus_editFlightPage_InputMONTH();
    takeData_editFlightPage_InputMONTH => {
        editFlightMonthInput.text = functionAPP.getMonthFromStringTime(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].departure);
    }
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #00CCFF;
            Text {text: "MONTH"; font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    editFlightMonthInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            editFlightMonthInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Month field";
                edited => {
                    if (functionAPP.catchErorrInputMonth(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputMonth(self.text));
                        unfocus_editFlightPage_InputMONTH();
                    }
                    self.text = functionAPP.standardInputMonth(self.text, functionAPP.newMonth_editFlight);
                    functionAPP.newMonth_editFlight = self.text;
                }
            }
        }
    }
}
component editFlightPage_InputYEAR inherits Rectangle {
    callback takeData_editFlightPage_InputYEAR();
    callback unfocus_editFlightPage_InputYEAR();
    takeData_editFlightPage_InputYEAR => {
        inputYEAR.text = functionAPP.getYearFromStringTime(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].departure);
    }
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #00CCFF;
            Text {text: "YEAR";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    inputYEAR.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputYEAR := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Year field";
                edited => {
                    if (functionAPP.catchErorrInputYear(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputYear(self.text));
                        unfocus_editFlightPage_InputYEAR();
                    }
                    self.text = functionAPP.standardInputYear(self.text, functionAPP.newYear_editFlight);
                    functionAPP.newYear_editFlight = self.text;
                }
            }
        }
    }
}
component editFlightPage_InputHOUR inherits Rectangle {
    callback takeData_editFlightPage_InputHOUR();
    callback unfocus_editFlightPage_InputHOUR();
    takeData_editFlightPage_InputHOUR => {
        inputHOUR.text = functionAPP.getHourFromStringTime(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].departure);
    }
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #FF9933;
            Text {text: "HOUR";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    inputHOUR.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputHOUR := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the HOUR field";
                edited => {
                    if (functionAPP.catchErorrInputHour(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputHour(self.text));
                        unfocus_editFlightPage_InputHOUR();
                    }
                    self.text = functionAPP.standardInputHour(self.text, functionAPP.newHour_editFlight);
                    functionAPP.newHour_editFlight = self.text;
                }
            }
        }
    }
}
component editFlightPage_InputMINUTE inherits Rectangle {
    callback takeData_editFlightPage_InputMinute();
    callback unfocus_editFlightPage_InputMinute();
    takeData_editFlightPage_InputMinute => {
        inputMinute.text = functionAPP.getMinuteFromStringTime(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].departure);
    }
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #FF9933;
            Text {text: "MINUTE";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    inputMinute.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputMinute := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Minute field";
                edited => {
                    if (functionAPP.catchErorrInputMinute(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputMinute(self.text));
                        unfocus_editFlightPage_InputMinute();
                    }
                    self.text = functionAPP.standardInputMinute(self.text, functionAPP.newMinute_editFlight);
                    functionAPP.newMinute_editFlight = self.text;
                }
            }
        }
    }
}
component editFlightPage_InputDES inherits Rectangle {
    callback takeData_editFlightPage_InputDES();
    callback unfocus_editFlightPage_InputDES();
    takeData_editFlightPage_InputDES => {
        inputDES.text = functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].destination;
    }
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "DESTINATION";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    inputDES.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            inputDES := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Destination field";
                edited => {
                    if (functionAPP.catchErorrInputDes(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputDes(self.text));
                        unfocus_editFlightPage_InputDES();
                    }
                    self.text = functionAPP.standardInputDes(self.text, functionAPP.newDes_editFlight);
                    functionAPP.newDes_editFlight = self.text;
                }
            }
        }
    }
}
component editFlightPage_CHOOSEPLANE inherits Rectangle {
    callback unfocus_editFlightPage_CHOOSEPLANE();
    in-out property <string> idPlaneHasChoose_new <=> functionAPP.idPlaneHasChoose_new;
    height: 40px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: red;
            border-color: #333;
            border-width: 2px;
            border-radius: 4px;
            Text {text: "CHANCE Plane";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center; font-weight: 700; color: black;}
            areaCHOOSE := TouchArea {
                clicked => { 
                    CONST-FUNCTION-GLOBAL.modeCHancePlaneToMakeFlight = true;
                    CONST-FUNCTION-GLOBAL.page_number_SHOW = 2;
                }
            }
            states [
                click when areaCHOOSE.pressed : {
                    background : white;
                }
            ]
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            idPlane := Text {
                text: idPlaneHasChoose_new;
                font-size: 20px;
            }
        }
    }
}
component editFlightPage inherits Rectangle {
    callback unfocus_editFlightPage();
    callback takeDATA_editFlightPage();
    takeDATA_editFlightPage => {
        editFlightPage-InputIDFlight.takeData_editFlightPage_InputIDFlight();
        editFlightPage-InputDay.takeData_editFlightPage_InputDay();
        editFlightPage-InputMONTH.takeData_editFlightPage_InputMONTH();
        editFlightPage-InputYEAR.takeData_editFlightPage_InputYEAR();
        editFlightPage-InputDES.takeData_editFlightPage_InputDES();
        editFlightPage-InputHOUR.takeData_editFlightPage_InputHOUR();
        editFlightPage-InputMINUTE.takeData_editFlightPage_InputMinute();

        functionAPP.idPlaneHasChoose_new = functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].planeCode;

        functionAPP.newFlightCODE_editFlight = functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].flightCode;
        functionAPP.newDay_editFlight = functionAPP.getDayFromStringTime(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].departure);
        functionAPP.newMonth_editFlight = functionAPP.getMonthFromStringTime(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].departure);
        functionAPP.newYear_editFlight = functionAPP.getYearFromStringTime(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].departure);
        functionAPP.newHour_editFlight = functionAPP.getHourFromStringTime(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].departure);
        functionAPP.newMinute_editFlight = functionAPP.getMinuteFromStringTime(functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].departure);
        functionAPP.newDes_editFlight = functionAPP.flightLIST_flightPage[functionAPP.flightHasEDITING_flightPage].destination;
    }
    backBtn := Rectangle {
        width: 100phx;
        height: 30phx;
        background: #c0c0c0;
        x: 12phx;
        y: 0;
        z: 1;
        Text {text: "BACK"; color: black; font-weight: 700; font-size: 16px;}
        backBtnArea := TouchArea {
            clicked => {
                CONST-FUNCTION-GLOBAL.editingFlight = false;
                functionAPP.flightHasEDITING_flightPage = -1;
                CONST-FUNCTION-GLOBAL.page_number_SHOW = 1;
            }
        }
        states [
            pressBack when backBtnArea.pressed == true : {
                backBtn.background : rgb(255,255,255);
            }
        ]
    } 
    width: 480phx;
    height:690phx;
    y: 150phx;
    TouchArea {z : 0;}
    background: #FFF; 
    HorizontalLayout {
        padding: 50phx;
        alignment: center;
        VerticalLayout {
            alignment: end;
            spacing: 15phx;
            Rectangle {
                width: 80%;
                height: 15%;
                background: #FDF5E6;
                Rectangle {
                    Text {text: "EDIT FLIGHT";font-size: 30phx; color: black; font-weight: 700;}
                }
            }
            editFlightPage-InputIDFlight := editFlightPage-InputIDFlight {
                unfocus_editFlightPage_InputIDFlight => {
                    unfocus_editFlightPage();
                }
            }
            editFlightPage-InputDay := editFlightPage-InputDay {
                unfocus_editFlightPage_InputDay => {
                    unfocus_editFlightPage();
                }
            }
            editFlightPage-InputMONTH := editFlightPage-InputMONTH {
                unfocus_editFlightPage_InputMONTH => {
                    unfocus_editFlightPage();
                }
            }
            editFlightPage-InputYEAR := editFlightPage-InputYEAR {
                unfocus_editFlightPage_InputYEAR => {
                    unfocus_editFlightPage();
                }
            }
            editFlightPage-InputHOUR := editFlightPage-InputHOUR {
                unfocus_editFlightPage_InputHOUR => {unfocus_editFlightPage();}
            }
            editFlightPage-InputMINUTE := editFlightPage-InputMINUTE {unfocus_editFlightPage_InputMinute => {unfocus_editFlightPage();}}
            editFlightPage-InputDES := editFlightPage-InputDES {unfocus_editFlightPage_InputDES => {unfocus_editFlightPage();}}
            editFlightPage-CHOOSEPLANE := editFlightPage-CHOOSEPLANE {unfocus_editFlightPage_CHOOSEPLANE => {unfocus_editFlightPage();}}
            Rectangle {
                x: parent.width / 2 - self.width / 2;
                saveArea:= TouchArea {
                    clicked => {
                        CONST-FUNCTION-GLOBAL.show_confirm_edit_flight();
                        unfocus_editFlightPage();
                    }
                }
                width: 150phx;
                height: 80phx;
                background: red;
                Text {text: "SAVE";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when saveArea.pressed : {
                        background: #FFF;
                    }
                ]
            }
        }
    }
    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 13 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 13 : {
            visible : false;
        }
    ]
}
//

//
// =================================================================================================================================

component AllPassengerPage_Body_Info_IDCard inherits Rectangle {
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "ID Card";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center; color : black;font-weight: 700;}
        }
        Rectangle {
            background: #E8E8E8;
            horizontal-stretch: 7;
            idCardInput := Text {
                color: black;
                horizontal-alignment: center;
                vertical-alignment: center;
                text: "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _";
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
            }
        }
    }
    states [
        renderInfo when functionAPP.passengerHasFocus_AllPASSPAGE != -1 : {
            idCardInput.text : functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasFocus_AllPASSPAGE].IDCard;
        }
    ]
}
component AllPassengerPage_Body_Info_firstName inherits Rectangle {
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "First Name";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center; color : black; font-weight: 700;}
        }
        Rectangle {
            background: #E8E8E8;
            horizontal-stretch: 7;
            firstNameInput := Text {
                color: black;
                horizontal-alignment: center;
                vertical-alignment: center;
                text: "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _";
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
            }
        }
    }
    states [
        renderInfo when functionAPP.passengerHasFocus_AllPASSPAGE != -1 : {
            firstNameInput.text : functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasFocus_AllPASSPAGE].firstName;
        }
    ]
}
component AllPassengerPage_Body_Info_lastName inherits Rectangle {
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Last Name";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;font-weight: 700; color: black;}
        }
        Rectangle {
            background: #E8E8E8;
            horizontal-stretch: 7;
            lastNameInput := Text {
                color: black;
                vertical-alignment: center;
                text: "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _";
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
            }
        }
    }
    states [
        renderInfo when functionAPP.passengerHasFocus_AllPASSPAGE != -1 : {
            lastNameInput.text : functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasFocus_AllPASSPAGE].lastName;
        }
    ]
}
component AllPassengerPage_Body_Info_sex inherits Rectangle {
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Sex";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;font-weight: 700; color : black;}
        }
        statusBlock := Rectangle {
            background: #E8E8E8;
            horizontal-stretch: 7;
            sexInput := Text {
                color: black;
                text: "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _";
                vertical-alignment: center;
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
            }
        }
    }
    states [
        renderInfo when functionAPP.passengerHasFocus_AllPASSPAGE != -1 : {
            sexInput.text : (functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasFocus_AllPASSPAGE].sex == 0 ? "Male" : "Female");
        }
    ]
}
component AllPassengerPage_Body_Info_Button inherits Rectangle {
    callback takeDataPlanePage_EditPassenger();
    height: 100phx;
    VerticalLayout {
        alignment:end;
        HorizontalLayout {
            alignment: space-around;
            editBtn := Rectangle {
                editArea:= TouchArea {
                    clicked => {
                        //     takeDataPlanePage_EditPlane()
                        if (functionAPP.passengerHasFocus_AllPASSPAGE != -1) {
                            CONST-FUNCTION-GLOBAL.page_number_SHOW = 9;
                            functionAPP.passengerHasEditing_ALLPASSPAGE = functionAPP.passengerHasFocus_AllPASSPAGE;
                            CONST-FUNCTION-GLOBAL.editingPASSENGER_ALLPASSPAGE = functionAPP.passengerHasEditing_ALLPASSPAGE;
                            takeDataPlanePage_EditPassenger();
                        }
                        else {
                            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("You must choose 1 passenger");
                        }
                    }
                }
                width: 140phx;
                height: 80phx;
                background: red;
                Text {text: "Edit";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when editArea.pressed : {
                        editBtn.background: #FFF;
                    }
                ]
            }
            ADDBtn := Rectangle {
                AddArea:= TouchArea {
                    clicked => {
                        CONST-FUNCTION-GLOBAL.page_number_SHOW = 10;
                        functionAPP.passengerHasEditing_ALLPASSPAGE = -1;
                        functionAPP.passengerHasFocus_AllPASSPAGE = -1;
                        CONST-FUNCTION-GLOBAL.addingPASSENGER = true;
                    }
                }
                width: 140phx;
                height: 80phx;
                background: red;
                Text {text: "Add Passenger";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when AddArea.pressed : {
                        ADDBtn.background: #FFF;
                    }
                ]
            }
        }
    }
}
component AllPassengerPage_Body_Info inherits Rectangle {
    callback takeDataPlanePage_EditPassenger_bodyInfo();
    background: rgba(255,255,255,1);
    border-width: 7phx;
    border-color: rgba(255,255,255,0.8);
    VerticalLayout {
        spacing : 15px;
        alignment: center;
        padding: 20phx;
        Rectangle {
            width: 100%; height : 100phx; background: transparent;
            Text {text: "INFOMATION";color: black;font-weight: 700; font-size: 28phx;}
        }
        AllPassengerPage-Body-Info-IDCard {}
        AllPassengerPage-Body-Info-firstName {}
        AllPassengerPage-Body-Info-lastName {}
        AllPassengerPage-Body-Info-sex {}
        AllPassengerPage-Body-Info-Button {
            // takeDataPlanePage_EditPlane => {
            //     takeDataPlanePage_EditPlane_bodyInfo();
            // }
            takeDataPlanePage_EditPassenger => {
                takeDataPlanePage_EditPassenger_bodyInfo();
            }
        }
    }
}
component AllPassengerPage_Body_ItemPlane inherits Rectangle {
    in-out property <int> stt;
    in-out property <string> IDCard;
    in-out property <string> firstName;
    in-out property <string> lastName;
    in-out property <int> sex;
    drop-shadow-blur: 5phx;
    width: 100%;
    height: 40phx;
    background: rgba(255,255,255,0.9);
    itemArea := TouchArea {
        clicked => {
            functionAPP.passengerHasFocus_AllPASSPAGE = stt - 1;
        }
    }
    HorizontalLayout {
        alignment: space-around;
        Rectangle {width: 5%;  height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: @tr("#{}", stt); color : black;}}
        Rectangle {width: 23%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: IDCard; color : black;}}
        Rectangle {width: 23%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: firstName; color : black;}}
        Rectangle {width: 23%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: lastName; color : black;}}
        Rectangle {width: 23%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text { font-weight: 700;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: (sex == 0 ? "Male" : "Female");color : black;}}
    }
    states [
        editing when (functionAPP.passengerHasEditing_ALLPASSPAGE == stt - 1) : {
            background : #757575;
        }
        hasPress when itemArea.pressed == true : {
            background : #c0c0c0;
        }
        hasHover when itemArea.has-hover : {
            background : red;
        }
        hassFocus when (functionAPP.passengerHasFocus_AllPASSPAGE == stt - 1) : {
            background : #a1a1a1;
        }
    ]
}
component AllPassengerPage_Body_ListPlane inherits Rectangle {
    VerticalLayout {
        VerticalLayout {
            padding: 4px;
            Rectangle {
                drop-shadow-blur: 5phx;
                drop-shadow-color: #333;
                drop-shadow-offset-y: 2phx;
                width: 100%;
                height: 40phx;
                background: #333;
                HorizontalLayout {
                    alignment: space-around;
                    Rectangle {width: 5%;  height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "STT";}}
                    Rectangle {width: 23%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "ID Card";}}
                    Rectangle {width: 23%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "First name";}}
                    Rectangle {width: 23%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Last Name";}}
                    Rectangle {width: 23%; height: 100%; border-width: 5phx; border-color: whitesmoke; Text {font-weight: 700;color : white;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "Sex";}}
                }
            }
        }
        ListView {
            width: 100%;
            for data[index] in functionAPP.AllPassengerPage_listAllPassenger : VerticalLayout {
                padding: 1phx;
                item := AllPassengerPage-Body-ItemPlane {
                    stt: index + 1;
                    IDCard: data.IDCard;
                    firstName: data.firstName;
                    lastName: data.lastName;
                    sex: data.sex;
                }
            }
        }
    }
}
component AllPassengerPage_Body inherits Rectangle{
    callback takeDataPlanePage_EditPassenger_body();
    height: (CONST-FUNCTION-GLOBAL.MAX_HEIGHT * 0.92)* 0.865;
    border-width: 10phx;
    border-color: rgba(255,255,255,0.4);
    border-radius: 12phx;
    VerticalLayout {
        padding: 34phx;
        vertical-stretch: 1;
        HorizontalLayout {
            spacing: 12phx;
            Rectangle {
                horizontal-stretch: 7;
                if functionAPP.AllPassengerPage_numberOfPassengerList != 0 : AllPassengerPage_Body_ListPlane {}
                if functionAPP.AllPassengerPage_numberOfPassengerList == 0 : Rectangle {
                    background: rgba(255,255, 255, 0.2);
                    border-color: white;
                    border-width: 10phx;
                    Text {
                        text: "There is no passengers";
                        font-size: 30phx;
                        color : white;
                    }
                }
            }
            Rectangle {
                horizontal-stretch: 3;
                AllPassengerPage-Body-Info {
                    // takeDataPlanePage_EditPlane_bodyInfo => {
                    //     takeDataPlanePage_EditPlane_body();
                    // }
                    takeDataPlanePage_EditPassenger_bodyInfo => {
                        takeDataPlanePage_EditPassenger_body();
                    }
                }
            }
        }
    }
}
component AllPassengerPage_Header_Search inherits Rectangle {
    callback unfocus_ALLPass_HEADER();
    border-width: 4phx;
    border-color: rgba(255,255,255,0.4);
    width: 400phx;
    TouchArea {clicked => {input.focus()}}
    VerticalLayout {
        alignment: center;
        HorizontalLayout {
            alignment: center;
            spacing: 12phx;
            Rectangle {
                Text {text: "#ID Card";color: white;font-weight: 700;font-size: 16phx;}
            }
            Rectangle {
                background: gray;
                height: 40phx;
                width: 250phx;
                input := LineEdit {
                    enabled: true;
                    width: 100%;
                    height: 100%;
                    placeholder-text: "Enter ID Card";
                    horizontal-alignment: center;
                    font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                    edited => {
                        if (functionAPP.catchErorrInputIDCard(self.text) != "") {
                            CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputIDCard(self.text));
                            unfocus_ALLPass_HEADER();
                        }
                        self.text = functionAPP.standardInputIDCard(self.text, functionAPP.searchCodeIDCardPass_ALLPASSENGER);
                        functionAPP.searchCodeIDCardPass_ALLPASSENGER = self.text;
                        functionAPP.handleSearch_ALLPassenge_MODE();
                        functionAPP.passengerHasFocus_AllPASSPAGE = -1;
                        CONST-FUNCTION-GLOBAL.editingPASSENGER_ALLPASSPAGE = -1;
                    }
                    states [
                        unabled_ when CONST-FUNCTION-GLOBAL.page_number_SHOW == 9 : {
                            enabled : false;
                        }
                        enabled_ when CONST-FUNCTION-GLOBAL.page_number_SHOW != 9 : {
                            enabled : true;
                        }
                    ]
                }
            }
        }
    }
}
component AllPassengerPage_header_sort inherits Rectangle {
    width: 700phx;
    VerticalLayout {
        HorizontalLayout {
            spacing: 8phx;
            Rectangle {
                Text {text : "SB_IDCard"; color : white;font_weight : 700;font-size : 18phx;}
                Area_IDCard := TouchArea {
                    clicked => {
                        if (functionAPP.passengerHasEditing_ALLPASSPAGE == -1) {
                            if (functionAPP.modeSearchPass_ALLPASS != 1) {
                                functionAPP.handleSortPassengerALLLASSPAFE_ID();
                                functionAPP.modeSearchPass_ALLPASS = 1;
                                functionAPP.passengerHasFocus_AllPASSPAGE = -1;
                            }
                            else {
                                functionAPP.modeSearchPass_ALLPASS = 0;
                            }
                        }
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                states [
                    A when Area-IDCard.pressed : {
                        opacity: 0.5;
                    }
                    active when functionAPP.modeSearchPass_ALLPASS == 1 : {
                        background : red;
                    }
                ]
            }   
            Rectangle {
                Text {text : "SB_FirstName"; color : white;font_weight : 700;font-size : 18phx;}
                Area_FirstName := TouchArea {
                    clicked => {
                        if (functionAPP.passengerHasEditing_ALLPASSPAGE == -1) {
                            if (functionAPP.modeSearchPass_ALLPASS != 2) {
                                functionAPP.handleSortPassengerALLLASSPAFE_FirstName();
                                functionAPP.modeSearchPass_ALLPASS = 2;
                                functionAPP.passengerHasFocus_AllPASSPAGE = -1;
                            }
                            else {
                                functionAPP.modeSearchPass_ALLPASS = 0;
                            }
                        }
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                states [
                    A when Area-FirstName.pressed : {
                        opacity: 0.5;
                    }
                    active when functionAPP.modeSearchPass_ALLPASS == 2 : {
                        background : red;
                    }
                ]
            } 
            Rectangle {
                Text {text : "SB_LastName"; color : white;font_weight : 700;font-size : 18phx;}
                Area_LastName := TouchArea {
                    clicked => {
                        if (functionAPP.passengerHasEditing_ALLPASSPAGE == -1) {
                            if (functionAPP.modeSearchPass_ALLPASS != 3) {
                                functionAPP.handleSortPassengerALLLASSPAFE_LastName();
                                functionAPP.modeSearchPass_ALLPASS = 3;
                                functionAPP.passengerHasFocus_AllPASSPAGE = -1;
                            }
                            else {
                                functionAPP.modeSearchPass_ALLPASS = 0;
                            }
                        }
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                states [
                    A when Area-LastName.pressed : {
                        opacity: 0.5;
                    }
                    active when functionAPP.modeSearchPass_ALLPASS == 3 : {
                        background : red;
                    }
                ]
            } 
            Rectangle {
                Text {text : "SB_MALE"; color : white;font_weight : 700;font-size : 18phx;}
                Area_Sex_MALE := TouchArea {
                    clicked => {
                        if (functionAPP.passengerHasEditing_ALLPASSPAGE == -1) {
                            if (functionAPP.modeSearchPass_ALLPASS != 4) {
                                functionAPP.handleSortPassengerALLLASSPAFE_Sex_MALE();
                                functionAPP.modeSearchPass_ALLPASS = 4;
                                functionAPP.passengerHasFocus_AllPASSPAGE = -1;
                            }
                            else {
                                functionAPP.modeSearchPass_ALLPASS = 0;
                            }
                        }
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                states [
                    A when Area-Sex_MALE.pressed : {
                        opacity: 0.5;
                    }
                    active when functionAPP.modeSearchPass_ALLPASS == 4 : {
                        background : red;
                    }
                ]
            } 
            Rectangle {
                Text {text : "SB_FEMALE"; color : white;font_weight : 700;font-size : 18phx;}
                Area_Sex_FEMALE := TouchArea {
                    clicked => {
                        if (functionAPP.passengerHasEditing_ALLPASSPAGE == -1) {
                            if (functionAPP.modeSearchPass_ALLPASS != 5) {
                                functionAPP.handleSortPassengerALLLASSPAFE_Sex_FEMALE();
                                functionAPP.modeSearchPass_ALLPASS = 5;
                                functionAPP.passengerHasFocus_AllPASSPAGE = -1;
                            }
                            else {
                                functionAPP.modeSearchPass_ALLPASS = 0;
                            }
                        }
                    }
                }
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                states [
                    A when Area-Sex-FEMALE.pressed : {
                        opacity: 0.5;
                    }
                    active when functionAPP.modeSearchPass_ALLPASS == 5 : {
                        background : red;
                    }
                ]
            } 
        }
    }
}
component AllPassengerPage_Header inherits Rectangle {
    callback unfocus_AllPassengerPage_Header();
    VerticalLayout {
        alignment: center;
        HorizontalLayout {
            spacing: 12px;
            alignment: space-between;
            padding: 4phx;
            padding-left: 0;
            planePage_Header_Search := AllPassengerPage_Header_Search {
                unfocus_ALLPass_HEADER => {
                    unfocus_AllPassengerPage_Header();
                }
                height: 100%;
            }

            AllPassengerPage_header_sort {}
        }
    }
}
component AllPassengerPage inherits Rectangle {
    Rectangle {
        backAREA := TouchArea {
            clicked => {
                CONST-FUNCTION-GLOBAL.page_number_SHOW = 0;
            }
        }
        background: rgba(255,255,255, 0.8);
        width: 100phx;
        height: 30phx;
        x : 73phx;
        y : 0;
        Text {
            text: "BACK";
            font-weight: 700;
            color: black;
        }
        states [
            pre when backAREA.pressed : {
                background : rgba(255,255,255, 0.5);
            }
        ]
    }
    callback unfocus_AllPassengerPage();
    callback takeDataPlanePage_EditPassenger_AllPassengerPage();
    VerticalLayout {
        padding: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND;
        padding-top: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND / 2;
        padding-bottom: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND / 4;
        AllPassengerPage-Header {
            unfocus_AllPassengerPage_Header => {
                unfocus_AllPassengerPage();
            }
        }
        AllPassengerPage_Body {
            takeDataPlanePage_EditPassenger_body => {
                takeDataPlanePage_EditPassenger_AllPassengerPage();
            }
        }
    }
    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 8 || CONST-FUNCTION-GLOBAL.page_number_SHOW == 9 || CONST-FUNCTION-GLOBAL.page_number_SHOW == 10: {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 8 && CONST-FUNCTION-GLOBAL.page_number_SHOW != 9 && CONST-FUNCTION-GLOBAL.page_number_SHOW != 10 : { 
            visible : false;
        }
    ]
}

// Edit Passenge

component editAllPassengerIdCard inherits Rectangle {
    callback unFocus_editAllPassenger_IDCard();
    callback takeDataFor_editIDCardInput();
    takeDataFor_editIDCardInput => {
        editPassengerIDInput.text = (functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasEditing_ALLPASSPAGE]).IDCard;
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "ID Card";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    editPassengerIDInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            editPassengerIDInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the ID card";
                edited => {
                    if (functionAPP.catchErorrInputIDCard(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputIDCard(self.text));
                        unFocus_editAllPassenger_IDCard();
                    }
                    self.text = functionAPP.standardInputIDCard(self.text, functionAPP.editIDCard_ALLPASS_var);
                    functionAPP.editIDCard_ALLPASS_var = self.text;
                }
            }
        }
    }
}
component editAllPassengerFirstName inherits Rectangle {
    callback unFocus_editAllPassenger_FirstName();
    callback takeDataFor_editFirstNameInput();
    takeDataFor_editFirstNameInput => {
        editPassFirstNameInput.text = (functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasEditing_ALLPASSPAGE]).firstName;
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "First name";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    editPassFirstNameInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            editPassFirstNameInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the first name";
                edited => {
                    if (functionAPP.catchErorrInputFirstName(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputFirstName(self.text));
                        unFocus_editAllPassenger_FirstName();
                    }
                    self.text = functionAPP.standardInputFirstName(self.text, functionAPP.editIFirastName_ALLPASS_var);
                    functionAPP.editIFirastName_ALLPASS_var = self.text;
                }
            }
        }
    }
}
component editAllPassengerLastName inherits Rectangle {
    callback unFocus_editAllPassenger_LastName();
    callback takeDataFor_editLastNameInput();
    takeDataFor_editLastNameInput => {
        editPassLastNameInput.text = (functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasEditing_ALLPASSPAGE]).lastName;
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Last Name"; font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    editPassLastNameInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            editPassLastNameInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the Last Name";
                edited => {
                    if (functionAPP.catchErorrInputLastName(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputLastName(self.text));
                        unFocus_editAllPassenger_LastName();
                    }
                    self.text = functionAPP.standardInputLastName(self.text, functionAPP.editLastName_ALLPASS_var);
                    functionAPP.editLastName_ALLPASS_var = self.text;
                }
            }
        }
    }
}
component editAllPassenger_ChooseSex inherits Rectangle {
    callback unFocuseditAllPassenger_ChooseSex();
    in-out property <int> sex;
    callback setSex(bool);
    setSex(ch) => {
        if (ch == true) { // true -> male sex = 0
            A.checked = true;
            B.checked = false;
        }
        else { // false -> female -> sex = 1
            A.checked = false;
            B.checked = true;
        }
    }
    HorizontalLayout {
        Rectangle {
            A := CheckBox {
                checked: false;
                text: "MALE";
                toggled => {
                    unFocuseditAllPassenger_ChooseSex();
                    if (B.checked == true) {
                        B.checked = false;
                    }
                    else {
                        A.checked = true;
                    }
                    functionAPP.editSex_ALLPASS_var = 0;
                }
            }
        }   
        Rectangle {
            B := CheckBox {
                text: "FEMALE";
                checked: false;
                toggled => {
                    unFocuseditAllPassenger_ChooseSex();
                    if (A.checked == true) {
                        A.checked = false;
                    }
                    else {
                        B.checked = true;
                    }
                    functionAPP.editSex_ALLPASS_var = 1;
                }
            }
        }
    }
    states [
        male when A.checked == true : {
            sex : 0;
        }
        female when B.checked == true : {
            sex : 1;
        }
    ]
}
component editAllPassengerSex inherits Rectangle {
    callback unFocus_editAllPassenger_Sex();
    callback takeDataFor_editSexPassInput();
    takeDataFor_editSexPassInput => {
        editAllPassenger-ChooseSex.setSex(functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasEditing_ALLPASSPAGE].sex == 0);
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Sex";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            editAllPassenger-ChooseSex := editAllPassenger-ChooseSex {
                unFocuseditAllPassenger_ChooseSex => {
                    unFocus_editAllPassenger_Sex();
                }
            }
        }
    }
}
component editAllPassengerPage inherits Rectangle {
    callback unFocus_editAllPassengerPage();
    callback takeDataPlanePage_EditPassenger_AllPassengerPage();
    takeDataPlanePage_EditPassenger_AllPassengerPage => {
        editAllPassengerIdCard.takeDataFor_editIDCardInput();
        editAllPassengerFirstName.takeDataFor_editFirstNameInput();
        editAllPassengerLastName.takeDataFor_editLastNameInput();
        editAllPassengerSex.takeDataFor_editSexPassInput();

        functionAPP.editIDCard_ALLPASS_var = functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasEditing_ALLPASSPAGE].IDCard;
        functionAPP.editIFirastName_ALLPASS_var = functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasEditing_ALLPASSPAGE].firstName;
        functionAPP.editLastName_ALLPASS_var = functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasEditing_ALLPASSPAGE].lastName;
        functionAPP.editSex_ALLPASS_var = functionAPP.AllPassengerPage_listAllPassenger[functionAPP.passengerHasEditing_ALLPASSPAGE].sex;
    }
    backBtn := Rectangle {
        width: 100phx;
        height: 50phx;
        background: rgba(192,192, 192, 0.5);
        x: 12phx;
        y: 0;
        z: 1;
        Image {source: @image-url("../img/3114883.png"); width: 40%;}
        backBtnArea := TouchArea {
            clicked => {
                CONST-FUNCTION-GLOBAL.editingPASSENGER_ALLPASSPAGE = -1;
                CONST-FUNCTION-GLOBAL.page_number_SHOW = 8;
                functionAPP.passengerHasEditing_ALLPASSPAGE = -1;
                functionAPP.passengerHasFocus_AllPASSPAGE = -1;
            }
        }
        states [
            pressBack when backBtnArea.pressed == true : {
                backBtn.background : rgb(255,255,255);
            }
        ]
    } 
    width: 480phx;
    height:630phx;
    TouchArea {z : 0;}
    background: rgba(255,255,255, 1); 
    HorizontalLayout {
        padding: 50phx;
        alignment: center;
        VerticalLayout {
            alignment: end;
            spacing: 15phx;
            Rectangle {
                width: 80%;
                height: 20%;
                background: #FDF5E6;
                Rectangle {
                    Text {text: "EDIT PASSENGER";font-size: 30phx; color: black;}
                }
            }
            editAllPassengerIdCard := editAllPassengerIdCard {
                unFocus_editAllPassenger_IDCard => {
                    unFocus_editAllPassengerPage();
                }
            }
            editAllPassengerFirstName := editAllPassengerFirstName {
                unFocus_editAllPassenger_FirstName => {
                    unFocus_editAllPassengerPage();
                }
            }
            editAllPassengerLastName := editAllPassengerLastName {
                unFocus_editAllPassenger_LastName => {
                    unFocus_editAllPassengerPage();
                }
            }
            editAllPassengerSex := editAllPassengerSex {
                unFocus_editAllPassenger_Sex => {
                    unFocus_editAllPassengerPage();
                }
            }
            Rectangle {
                x: parent.width / 2 - self.width / 2;
                saveArea:= TouchArea {
                    clicked => {
                        CONST-FUNCTION-GLOBAL.show_confirm_EDIT_PASSENGERALL();
                        unFocus_editAllPassengerPage();
                    }
                }
                width: 150phx;
                height: 80phx;
                background: red;
                Text {text: "SAVE";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when saveArea.pressed : {
                        background: #FFF; 
                    }
                ]
            }
        }
    }

    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 9 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 9: {
            visible : false;
        }
    ]
}
//

component addPASSENGER_ALLPAGE_InputIDPlane inherits Rectangle {
    callback unfocusaddPASSENGER_ALLPAGE_InputIDPlane();
    callback resetADDPASSENGER();
    resetADDPASSENGER => {
        addPassengerIDInput.text = "";
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "ID Card";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    addPassengerIDInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            addPassengerIDInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the ID Card";
                edited => {
                    if (functionAPP.catchErorrInputIDCard(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputIDCard(self.text));
                        unfocusaddPASSENGER_ALLPAGE_InputIDPlane();
                    }
                    self.text = functionAPP.standardInputIDCard(self.text, functionAPP.addPassengerIDCardNameInput_VAR);
                    functionAPP.addPassengerIDCardNameInput_VAR = self.text;
                }
            }
        }
    }
}
component addPASSENGER_ALLPAGE_InputFirstName inherits Rectangle {
    callback unFocusaddPASSENGER_ALLPAGE_InputFirstName();
    callback resetADDPASSENGER();
    resetADDPASSENGER => {
        addPassengerFirstNameInput.text = "";
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "First Name";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    addPassengerFirstNameInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            addPassengerFirstNameInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the first name";
                edited => {
                    if (functionAPP.catchErorrInputFirstName(self.text) != "") {
                        unFocusaddPASSENGER_ALLPAGE_InputFirstName();
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputFirstName(self.text));
                    }
                    self.text = functionAPP.standardInputFirstName(self.text, functionAPP.addPassengerFirstNameInput_VAR);
                    functionAPP.addPassengerFirstNameInput_VAR = self.text;
                }
            }
        }
    }
}
component addPASSENGER_ALLPAGE_InputLastName inherits Rectangle {
    callback unfocus_addPASSENGER_ALLPAGE_InputLastName();
    callback resetADDPASSENGER();
    resetADDPASSENGER => {
        addPassengerLastNameInput.text = "";
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "Last name"; font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                    addPassengerLastNameInput.focus();
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            addPassengerLastNameInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;
                placeholder-text: "Enter the last name";
                edited => {
                    if (functionAPP.catchErorrInputLastName(self.text) != "") {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR(functionAPP.catchErorrInputLastName(self.text));
                        unfocus_addPASSENGER_ALLPAGE_InputLastName();
                    }
                    self.text = functionAPP.standardInputLastName(self.text, functionAPP.addPassengerLastNameInput_VAR);
                    functionAPP.addPassengerLastNameInput_VAR = self.text;
                }
            }
        }
    }
}
component addPASS_AllPassenger_ChooseSex inherits Rectangle {
    callback resetADDPASSENGER();
    resetADDPASSENGER => {
        A.checked = false;
        B.checked = false;
    }
    HorizontalLayout {
        Rectangle {
            A := CheckBox {
                checked: false;
                text: "MALE";
                toggled => {
                    if (functionAPP.addPassengerSexInput_VAR != 0) {
                        A.checked = true;
                        B.checked = false;
                        functionAPP.addPassengerSexInput_VAR = 0;
                    }
                }
            }
        }   
        Rectangle {
            B := CheckBox {
                text: "FEMALE";
                checked: false;
                toggled => {
                    if (functionAPP.addPassengerSexInput_VAR != 1) {
                        A.checked = false;
                        B.checked = true;
                        functionAPP.addPassengerSexInput_VAR = 1;
                    }
                }
            }
        }
    }
    states [

    ]
}
component addPASSENGER_ALLPAGE_InputSEX inherits Rectangle {
    callback resetSEX();
    resetSEX => {
        addPASS-AllPassenger-ChooseSex.resetADDPASSENGER();
    }
    height: 50px;
    HorizontalLayout {
        Rectangle {
            width: 40%;
            background: #C0C0C0;
            Text {text: "SEX";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                }
            }
        }
        Rectangle {
            background: gray;
            horizontal-stretch: 7;
            addPASS_AllPassenger_ChooseSex := addPASS_AllPassenger_ChooseSex {}
        }
    }
}
component addPASSENGER_ALLPAGE inherits Rectangle {
    callback unfocus_addPASSENGER_ALLPAGE();
    in-out property <int> rs : 0;
    backBtn := Rectangle {
        width: 100phx;
        height: 50phx;
        background: #c0c0c0;
        x: 12phx;
        y: 0;
        z: 1;
        Image {source: @image-url("../img/3114883.png"); width: 40%;}
        backBtnArea := TouchArea {
            clicked => {
                CONST-FUNCTION-GLOBAL.addingPASSENGER = false;

                functionAPP.passengerHasFocus_AllPASSPAGE = -1;
                functionAPP.passengerHasEditing_ALLPASSPAGE = -1;
                CONST-FUNCTION-GLOBAL.page_number_SHOW = 8;
                CONST-FUNCTION-GLOBAL.addingPASSENGER = false;

                addPASSENGER-ALLPAGE-InputIDPlane.resetADDPASSENGER();
                addPASSENGER-ALLPAGE-InputFirstName.resetADDPASSENGER();
                addPASSENGER-ALLPAGE-InputLastName.resetADDPASSENGER();
                addPASSENGER-ALLPAGE-InputSEX.resetSEX();

                functionAPP.addPassengerIDCardNameInput_VAR = "";
                functionAPP.addPassengerFirstNameInput_VAR = "";
                functionAPP.addPassengerLastNameInput_VAR = "";
                functionAPP.addPassengerSexInput_VAR = 7;
            }
        }
        states [
            pressBack when backBtnArea.pressed == true : {
                backBtn.background : rgb(255,255,255);
            }
        ]
    } 
    width: 480phx;
    height:630phx;
    TouchArea {z : 0;}
    background: #FFF; 
    HorizontalLayout {
        padding: 50phx;
        alignment: center;
        VerticalLayout {
            alignment: end;
            spacing: 15phx;
            Rectangle {
                width: 80%;
                height: 20%;
                background: #FDF5E6;
                Rectangle {
                    Text {text: "ADD PASSENGER";font-size: 30phx; color: black;}
                }
            }
            addPASSENGER-ALLPAGE-InputIDPlane := addPASSENGER-ALLPAGE-InputIDPlane {unfocusaddPASSENGER_ALLPAGE_InputIDPlane => {unfocus_addPASSENGER_ALLPAGE()}}
            addPASSENGER-ALLPAGE-InputFirstName := addPASSENGER-ALLPAGE-InputFirstName {unFocusaddPASSENGER_ALLPAGE_InputFirstName => {unfocus_addPASSENGER_ALLPAGE()}}
            addPASSENGER-ALLPAGE-InputLastName  := addPASSENGER-ALLPAGE-InputLastName {unfocus_addPASSENGER_ALLPAGE_InputLastName => {unfocus_addPASSENGER_ALLPAGE()}}
            addPASSENGER-ALLPAGE-InputSEX := addPASSENGER-ALLPAGE-InputSEX {}
            Rectangle {
                x: parent.width / 2 - self.width / 2;
                addAREA:= TouchArea {
                    clicked => {
                        // unFocusAddPlanePage();
                        unfocus_addPASSENGER_ALLPAGE();
                        rs = functionAPP.handleADDPASSENGER_ALLPASS();
                        if (rs == 1) {
                            addPASSENGER-ALLPAGE-InputIDPlane.resetADDPASSENGER();
                            addPASSENGER-ALLPAGE-InputFirstName.resetADDPASSENGER();
                            addPASSENGER-ALLPAGE-InputLastName.resetADDPASSENGER();
                            addPASSENGER-ALLPAGE-InputSEX.resetSEX();

                            functionAPP.addPassengerIDCardNameInput_VAR = "";
                            functionAPP.addPassengerFirstNameInput_VAR = "";
                            functionAPP.addPassengerLastNameInput_VAR = "";
                            functionAPP.addPassengerSexInput_VAR = 7;

                            CONST-FUNCTION-GLOBAL.page_number_SHOW = 8;
                        }
                    }
                }
                width: 150phx;
                height: 80phx;
                background: red;
                Text {text: "ADD";color: black; font-size:16phx; font-weight: 700;}
                states [
                    ac when addAREA.pressed : {
                        background: #FFF;
                    }
                ]
            }
        }
    }

    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 10 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 10 : {
            visible : false;
        }
    ]
}
// add passenger
// UI KHOA

export global statistical_global {

    // in information khi không chọn gì
    in-out property <plane> infoPlane : {
        IDPlane: "ID PLANE", typePlane: "TYPE PLANE", RowNumber : 0, ColNumber : 0, flyTimes : 0
    }; 
    callback release_info();
    release_info => {
        infoPlane.IDPlane = "ID PLANE";
        infoPlane.typePlane = "TYPE PLANE";
        infoPlane.RowNumber = 0;
        infoPlane.ColNumber = 0;
        infoPlane.flyTimes = 0;
    }
    in-out property <int> size_airplaneList : 0; // so luong phan tu
    //-------//
    in-out property <int> chosse : -1; // focus index
    in-out property <int> chosse_sortBox : 0;
    in-out property <string> Temp : ""; // Lưu lại biến giá trị trước khi nhập
    in-out property <string> check_planeCode : ""; // giá trị check phần nhập
}

export global statistical_data {
    in-out property <[plane]> statisticalPage_planeList: [
        {IDPlane : "MH370", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "AK100", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "SUZI2", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "SU872", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "DMK03", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "KH211", typePlane : "AIRLSW", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "KAMMW", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "OPIQW", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "SADWW", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "Okina", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "WSTDC", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
        {IDPlane : "AKIWU", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "MH370", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai :  true},
        {IDPlane : "OISS3", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : false},
        {IDPlane : "SOS62", typePlane : "Boeing", ColNumber : 12, RowNumber : 10, isAvai : true},
    ];
    in-out property <string> input_planeCode : "";
    
    callback handle_dataSLINT();
    callback get_dataSLINT(string) -> string;
    handle_dataSLINT => {
        statistical_global.check_planeCode = get_dataSLINT(input_planeCode);
        CONST-FUNCTION-GLOBAL.message_warning = statistical_global.check_planeCode != "" ? statistical_global.check_planeCode : "";
        CONST-FUNCTION-GLOBAL.show_warning = statistical_global.check_planeCode != "" ? true : false;
    }
    
    callback standardize_planeCode(string) -> string;
    //callback numberOfPlane() -> int;
    callback find_planeCode(string);
    // 1 -> idPlane
    // 2 -> typePlane
    // 3 -> flightCount
    callback sort_click(int);
    callback release_memory();
    release_memory => {
        statistical-global.size_airplaneList = 0;
        statistical-global.chosse_sortBox = 0;
        statistical-global.chosse = -1;
        statistical-global.check_planeCode = "";
        statistical-global.Temp = "";
        input_planeCode = "";
    }
}

component statistical_search_planeCode inherits Rectangle {
    border-color: #FFF;
    border-width: 4phx;
    width: 440phx;
    in-out property <string> planeCode: "";
    VerticalLayout {
        alignment: center;
        HorizontalLayout {
            spacing: 12phx;
            alignment: center;
            Text {text: "Plane Code"; color: black; font-size: 30phx;}
            Rectangle {
                background: #333333;
                height: 40phx;
                width: 250phx;
                planeCode_input := LineEdit {
                    horizontal-alignment: center;
                    height: parent.height;
                    width: parent.width;
                    placeholder-text: "Enter Plane Code";
                    font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                    edited => {
                        statistical-global.chosse = -1;
                        statistical-global.release_info();
                        // Chuẩn hóa chuỗi
                        self.text = statistical_data.standardize_planeCode(self.text);

                        // Lưu lại giá trị self.text để kiểm tra
                        statistical_data.input_planeCode = self.text;

                        // Đưa qua c++ kiểm tra nhập đúng không
                        statistical_data.handle_dataSLINT();

                        // Gán lại self text nếu nhập sai
                        self.text = CONST-FUNCTION-GLOBAL.show_warning == true ? statistical_global.Temp : self.text;
                        
                        // gán lại dữ liệu
                        statistical_data.input_planeCode = self.text;
                        statistical_global.Temp = statistical_data.input_planeCode;
                        
                        // Tìm planeCode rồi thu gọn danh sách
                        statistical_data.find_planeCode(statistical_global.Temp);
                        if (statistical-global.chosse_sortBox != 0) { statistical-data.sort_click(statistical-global.chosse_sortBox);}
                    }
                }
            }
        }
    }
}

component statistical_search inherits Rectangle{
    callback unFocus_statistical_search();
    VerticalLayout {
        alignment: center;
        HorizontalLayout {
            spacing: 12px;
            alignment: center;
            padding: 4phx;
            padding-left: 5phx;
            searchInfo :=  statistical_search_planeCode{
                height: 95%;
            }
            Rectangle {
                width: 100phx;   
                border-color: #FFF;
                border-width: 4phx;
                background: rgba(255,255,255, 0.4);
                opacity: 1;
                Text {
                    text: "SEARCH";
                    font-weight: 1000;
                }
                touchArea := TouchArea {
                    clicked => {
                        statistical-global.chosse = -1;
                        statistical-global.release_info();
                        
                        // bỏ theo line edit
                        unFocus_statistical_search();

                        // gán lại text
                        statistical_data.input_planeCode = statistical_global.Temp;

                        // đưa qua c++
                        statistical_data.handle_dataSLINT();
                        
                        // Tìm planeCode rồi thu gọn danh sách
                        statistical_data.find_planeCode(statistical_global.Temp);
                        if (statistical-global.chosse_sortBox != 0) { statistical-data.sort_click(statistical-global.chosse_sortBox);}
                    }
                }
                states [
                    hasPress when touchArea.pressed : {
                        opacity : 0.5;
                    }
                ]
            }
        }
    }
}

component statistical_sortBox_idPlane inherits Rectangle {
    callback unFocus_statistical_sortBox_idPlane();
    width: 250phx;
    height: 40phx; 
    border-color: #FFF;
    border-width: 4phx;
    background: rgba(255,255,255, 0.4);
    Text {text: "SORT_ID_PLANE";color: white; font-size: 15phx; font-weight: 600;}
    buttonArea := TouchArea {
        clicked => {
            statistical-global.chosse = -1;
            statistical-global.release_info();
            unFocus_statistical_sortBox_idPlane();
            statistical_global.chosse_sortBox = statistical_global.chosse_sortBox != 1 ? 1 : 0;

            if (statistical-global.chosse_sortBox != 0) {statistical_data.find_planeCode(statistical-global.Temp);}
            statistical_data.sort_click(statistical_global.chosse_sortBox);
            if (statistical-global.chosse_sortBox == 0) {statistical_data.find_planeCode(statistical-global.Temp);}

        }
    }
    states [
        act when statistical_global.chosse_sortBox == 1: {
            background: #1f92c7;
        }
    ]
}

component statistical_sortBox_typePlane inherits Rectangle {
    callback unFocus_statistical_sortBox_typePlane();
    width: 250phx;
    height: 40phx;
    border-color: #FFF;
    border-width: 4phx;
    background: rgba(255,255,255, 0.4);
    Text {text: "SORT_TYPE_PLANE";color: white; font-size: 15phx; font-weight: 600;}
    buttonArea := TouchArea {
        clicked => {
            statistical-global.chosse = -1;
            statistical-global.release_info();
            unFocus_statistical_sortBox_typePlane();
            // lấy id Sort hiện đỏ
            statistical_global.chosse_sortBox = statistical_global.chosse_sortBox != 2 ? 2 : 0;
            // truyền biến qua c++
            if (statistical-global.chosse_sortBox != 0) {statistical_data.find_planeCode(statistical-global.Temp);}
            statistical_data.sort_click(statistical_global.chosse_sortBox);
            if (statistical-global.chosse_sortBox == 0) {statistical_data.find_planeCode(statistical-global.Temp);}

            // statistical_data.input_planeCode = "";
            // statistical_data.handle_dataSLINT();
        }
    }
    states [
        ac when statistical_global.chosse_sortBox == 2: {
            background: #1f92c7;
        }
    ]
}

component statistical_sortBox_flightCount inherits Rectangle {
    callback unFocus_statistical_sortBox_flightCount ();
    width: 250phx;
    height: 40phx;
    border-color: #FFF;
    border-width: 4phx;
    background: rgba(255,255,255, 0.4);
    
    Text {text: "SORT_FLIGHT_COUNT";color: white; font-size: 15phx; font-weight: 600;}
    buttonArea := TouchArea {
        clicked => {
            statistical-global.chosse = -1;
            statistical-global.release_info();
            unFocus_statistical_sortBox_flightCount ();
            statistical_global.chosse_sortBox = statistical_global.chosse_sortBox != 3 ? 3 : 0;
            
            if (statistical-global.chosse_sortBox != 0) {statistical_data.find_planeCode(statistical-global.Temp);}
            statistical_data.sort_click(statistical_global.chosse_sortBox);
            if (statistical-global.chosse_sortBox == 0) {statistical_data.find_planeCode(statistical-global.Temp);}

        }
    }
    states [
        ac when statistical_global.chosse_sortBox == 3: {
            background: #1f92c7;
        }
    ]
}

component statistical_sortBox inherits Rectangle {
    callback unFocus_statistical_sortBox ();
    border-color: black;
    border-width: 4phx;
    background: rgba(255,255,255, 0.4);
    VerticalLayout {
        alignment: center;
        padding: 15phx;
        Rectangle {
            Text {text: "SORT";color: black; font-size: 20phx;}
        }
        HorizontalLayout {
            spacing: 15phx;
            alignment: center;
            padding: 10phx;
            statistical_sortBox_idPlane {
                unFocus_statistical_sortBox_idPlane => {unFocus_statistical_sortBox()}
            }
            statistical_sortBox_typePlane {
                unFocus_statistical_sortBox_typePlane => {unFocus_statistical_sortBox()}
            }
            statistical_sortBox_flightCount {
                unFocus_statistical_sortBox_flightCount => {unFocus_statistical_sortBox()}
            }
        }
    }
}

component  statistical_search_sortBox inherits Rectangle {
    callback unFocus_statistical_search_sortBox ();
        HorizontalLayout {
            alignment: center;
            padding: 20phx;
            spacing: 300phx;
            vertical-stretch: 1;
            height: (CONST-FUNCTION-GLOBAL.MAX_HEIGHT * 0.15);
            VerticalLayout {
                alignment: center;
                statistical_search {
                    height: parent.height * 0.7;
                    unFocus_statistical_search => {unFocus_statistical_search_sortBox()}
                }
            }
            statistical_sortBox {
                unFocus_statistical_sortBox => {unFocus_statistical_search_sortBox()}
            }
        }
}

component statistical_list_item inherits Rectangle {
    callback unFocus_statistical_list_item();
    in-out property <int> stt;
    in-out property <bool> check : false; 
    in-out property <string> idPlane;
    in-out property <int> filghtCount;
    in-out property <string> typePlane;
    //border-width: 2phx;
    //border-color: red;
    drop-shadow-blur: 5phx;
    width: 100%;
    height: 40phx;
    background: rgba(255,255,255,0.9);
    itemArea := TouchArea {
        clicked => {
            check = statistical_global.chosse == stt ? false : true;
            statistical_global.chosse = !check ? -1 : stt;
            statistical_global.infoPlane.IDPlane = !check ? "ID PLANE" : idPlane;
            statistical_global.infoPlane.typePlane = !check ? "TYPE PLANE" : typePlane;
            statistical_global.infoPlane.flyTimes = !check ? 0 : filghtCount;
            unFocus_statistical_list_item();
        }
    }
    HorizontalLayout {
        alignment: space-around;
        Rectangle {width: 20%; height: 100%; border-width: 1phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: stt; color : black; font-weight: 500;}}
        Rectangle {width: 25%; height: 100%; border-width: 1phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: idPlane; color : black; font-weight: 500;}}
        Rectangle {width: 25%; height: 100%; border-width: 1phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: typePlane; color : black; font-weight: 500;}}
        Rectangle {width: 20%; height: 100%; border-width: 1phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: filghtCount; color : black; font-weight: 500;}}
    }
    
    states [
        active-hover when itemArea.has-hover && stt != statistical_global.chosse: {
            background : #FF9999;
        }
        active-hover-chosse when itemArea.has-hover && stt == statistical_global.chosse : {
            background : #1f92c7;
        }
        chosse when stt == statistical_global.chosse : {
            background: #1f92c7;
        }
    ]
}

component statistical_list inherits Rectangle{
    callback unFocus_statistical_list();
    unFocus_statistical_list => {}
    VerticalLayout {
        VerticalLayout {
            padding: 4px;
            Rectangle {
                drop-shadow-blur: 5phx;
                drop-shadow-color: #333;
                drop-shadow-offset-y: 2phx;
                width: 100%;
                height: 40phx;
                background: #333;
                HorizontalLayout {
                    alignment: space-around;
                    Rectangle {width: 20%;  height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "STT"; color : white;}}
                    Rectangle {width: 25%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "ID PLANE"; color : white;}}
                    Rectangle {width: 25%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "TYPE PLANE"; color : white;}}
                    Rectangle {width: 20%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "FILGHT COUNT"; color : white;}} }  
            }
        }
        ListView {
            width: 100%;
            for data[index] in statistical_data.statisticalPage_planeList : VerticalLayout {
                padding: 4phx;
                if statistical_global.size_airplaneList != -1 : statistical_list_item {
                    stt : index + 1;
                    idPlane: data.IDPlane;
                    filghtCount: data.flyTimes;
                    typePlane: data.typePlane;
                    unFocus_statistical_list_item => {unFocus_statistical_list()}
                }   
            }
        }
    }
}

component statistical_boxInfoPlane_idPlane inherits Rectangle {
    HorizontalLayout {
        Rectangle {
            width: 200phx;
            height: 50px;
            background: rgba(0, 0, 0, 0.6);
            Text {
                text: "ID PLANE";
                font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
            }
        }
        Rectangle {
            background: rgba(128, 128, 128, 0.6);
            dataInfo := Text {
                color: black;
                horizontal-alignment: center;
                text: statistical_global.infoPlane.IDPlane;
                font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                font-weight: 600;
            }
        }
    }
}

component statistical_boxInfoPlane_typePlane inherits Rectangle {
    HorizontalLayout {
        Rectangle {
            width: 200phx;
            height: 50px;
            background: rgba(0, 0, 0, 0.6);
            Text {
                text: "TYPE PLANE";
                font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
            }
        }
        Rectangle {
            background: rgba(128, 128, 128, 0.6);
            dataInfo := Text {
                color: black;
                horizontal-alignment: center;
                text: statistical_global.infoPlane.typePlane;
                font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                font-weight: 600;
            }
        }
    }
}

component statistical_boxInfoPlane_flightCount inherits Rectangle {
    HorizontalLayout {
        Rectangle {
            width: 200phx;
            height: 50px;
            background: rgba(0, 0, 0, 0.6);
            Text {
                text: "FLIGHT COUNT";
                font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
            }
        }
        Rectangle {
            background: rgba(128, 128, 128, 0.6);
            dataInfo := Text {
                color: black;
                horizontal-alignment: center;
                text: statistical_global.infoPlane.flyTimes;
                font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                font-weight: 600;
            }
        }
    }
}

component statistical_boxInfoPlane inherits Rectangle {
    background: rgba(255,255,255, 0.2);
    border-color: white;
    border-width: 3phx;
    VerticalLayout {
        alignment: center;
        padding: 20phx;
        spacing: 25phx;
        HorizontalLayout {
            alignment: center;
            padding: 50phx;
            Text {
                text: "INFORMATION";
                color: black;
                font-size: 30phx;
                font-weight: 50;
            }
        }
        statistical_boxInfoPlane_idPlane {}
        statistical_boxInfoPlane_typePlane {}
        statistical_boxInfoPlane_flightCount {}
    }
}

component statistical_list_boxInfoPlane inherits Rectangle{
    callback unFocus_statistical_list_boxInfoPlane();
    height: (CONST-FUNCTION-GLOBAL.MAX_HEIGHT * 0.65);
    border-width: 2phx;
    border-color: black;
    VerticalLayout {
        padding: 34phx;
        vertical-stretch: 1;
        HorizontalLayout {
            spacing: 12phx;
            listFlightPassenger := Rectangle {
                width: 70%;
                statistical_list {
                    if statistical_global.size_airplaneList == -1 : Rectangle {
                        width: parent.width - 10phx;
                        height: parent.height - 18phx;
                        y : 47phx;
                        background: rgba(255,255,255, 0.2);
                        border-color: white;
                        border-width: 9phx;
                        Text {
                            text: "There is no flights";
                            font-size: 30phx;
                            color : white;
                        }
                    }
                    unFocus_statistical_list => {unFocus_statistical_list_boxInfoPlane()}
                }
            }
            statistical_boxInfoPlane {
                y : 0;
                width: 30%;
            }
        }
    }
}

component statistical inherits Rectangle {
    callback unFocus_statistical();
    VerticalLayout {
        padding: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND;
        padding-top: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND / 2;
        padding-bottom: CONST-FUNCTION-GLOBAL.SPACEAPPAROUND / 4;
        statistical_search_sortBox {
            vertical-stretch: 1;
            unFocus_statistical_search_sortBox => {unFocus_statistical()}
        }
        statistical_list_boxInfoPlane {vertical-stretch: 9;
            unFocus_statistical_list_boxInfoPlane => {unFocus_statistical()}
        }
    }
    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 3 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 3 : {
            visible : false;
        }
    ]
}

component ticket_airlines inherits Rectangle {
    border-color: black;
    border-width: 2phx;
    background: #C0C0C0;
    VerticalLayout {
        padding: 10phx;
        alignment: center;
        HorizontalLayout {
            padding: 12phx;
            alignment: start;
            Text {
                vertical-alignment: center;
                text: "VIETNAM AIRLINES \n#####";
                color: black;
                font-size: 20phx;
                font-weight: 600;
            }
        }
        HorizontalLayout {
            alignment: start;
            padding: 3phx;
            VerticalLayout {
                alignment: center;
                spacing: 10phx;
                Text {
                    vertical-alignment: center;
                    text: @tr("DEPARTURE: {}", ticket-global.dateFlight);
                    color: black;
                    font-size: 20phx;
                    font-weight: 500;
                }
            } 
        }
    }
}

component ticket_info_destination inherits Rectangle {
    border-color: black;
    border-width: 2phx;
    HorizontalLayout {
        padding: 10phx;
        spacing: 10phx;
        Text {
            text: @tr("From:\n{},\nVIETNAM", ticket-global.frFlight);
            color: black;
            font-size: 15phx;
            font-weight: 100;
        }
        Text {
            text: @tr("To:\n{},\nVIETNAM", ticket-global.toFlight);
            color: black;
            font-size: 15phx;
            font-weight: 100;
        }
    }
}

component ticket_info_dateTime inherits Rectangle {
    HorizontalLayout {
        Text {
            text: @tr("Departing At:\n{}", ticket-global.timeDepartingFlight);
            color: gray;
            font-size: 15phx;
            font-weight: 100;
        }
        Text {
            text: @tr("Arriving At:\n{}", ticket-global.timeArrivingFlight);
            color: gray;
            font-size: 15phx;
            font-weight: 100;
        }
    }
}

component ticket_info_typePlane inherits Rectangle {
    VerticalLayout {
        alignment: center;
        Text {
            text: @tr("FLIGHT CODE: {}", ticket-global.flightCode);
            color: gray;
            font-size: 18phx;
            font-weight: 100;
        }
        Text {
            text: @tr("PLANE CODE: {}", ticket_global.information.info.IDPlane);
            color: gray;
            font-size: 18phx;
            font-weight: 100;
        }
        Text {
            text: @tr("TYPE PLANE: {}", ticket_global.information.info.typePlane);
            color: gray;
            font-size: 18phx;
            font-weight: 100;
        }
    }
}

component ticket_info inherits Rectangle {
    border-color: black;
    border-width: 2phx;
    background: white;
    HorizontalLayout {
        spacing: 10phx;
        VerticalLayout {
            padding: 10phx;
            spacing: 10phx;
            ticket_info_destination {}
            ticket_info_dateTime {}        
        }
        ticket_info_typePlane { width: 20%;}
    } 
}

component ticket_airlines_info inherits Rectangle {
    HorizontalLayout {
        spacing: 10phx;
        ticket_airlines { width: 30%; }
        ticket-info { width: 69.5%; }
    }
}

component ticket_list inherits Rectangle {
    border-color: black;
    border-width: 2phx;
    background: rgb(0, 0, 0, 0.6);
    VerticalLayout {
        height: 100%;
        alignment: center;
        spacing: 10phx;
        for data1[id1] in ticket-global.row : HorizontalLayout {
            width: 100%;
            alignment: center;
            spacing: 10phx;
            for data[id] in ticket-global.col : Rectangle {  
                Text {
                    text : id + id1 * data1.col;
                    color:white;
                    font-size: 22phx;
                    font-weight: 500;
                } 
                width: ticket_global.page_lengthheight / 7;
                height: ticket_global.page_lengthheight / 17.5;
                background: ticket-global.z[id + id1 * data1.col].check ? #2b5ee7 : gray;
                touch := TouchArea { 
                    clicked => {
                        if ((ticket-global.z[id + id1 * data1.col]).check) {
                            ticket-global.getCPP_information_cancel(id + id1 * data1.col);
                        }
                        ticket-global.chose_ticketSeat = ticket-global.chose_ticketSeat == id + id1 * data1.col ? -1 : id + id1 * data1.col;

                        if (ticket-global.chose_ticketFunction == 1) {
                            if (ticket-global.chose_ticketSeat == -1) {
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("You must select a seat to reserve or press back");
                            }
                            ticket-global.chose_ticketSeat = ticket-global.chose_ticketSeat == -1 ? id + id1 * data1.col : ticket-global.chose_ticketSeat;
                            if (ticket-global.z[id + id1 * data1.col].check) {
                                ticket-global.chose_ticketSeat = ticket-global.chose_ticketSeatTmp;
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("                   We're sorry!\nThis seat has already been reserved");

                            } 
                            ticket-global.chose_ticketSeatTmp = ticket-global.chose_ticketSeat;
                        }

                        if (ticket-global.chose_ticketFunction == 2) {
                            if (ticket-global.chose_ticketSeat == -1) {
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("You must select a seat to cancel or press back");
                            }
                            ticket-global.chose_ticketSeat = ticket-global.chose_ticketSeat == -1 ? id + id1 * data1.col : ticket-global.chose_ticketSeat;
                            if (!ticket-global.z[id + id1 * data1.col].check) {
                                ticket-global.chose_ticketSeat = ticket-global.chose_ticketSeatTmp;
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("We're sorry! This seat hasn't been reserved\n              so it cannot be canceled!");
                            }
                            ticket-global.chose_ticketSeatTmp = ticket-global.chose_ticketSeat;
                        }
                    }
                }
                states [
                    active-hover when touch.has-hover  : {
                        background: ticket-global.z[id + id1 * data1.col].check ? #bc0895 : #f34141;
                    }
                    click when ticket-global.chose_ticketSeat == id + id1 * data1.col : {
                        background: ticket-global.z[id + id1 * data1.col].check ? #bc0895 : #0be68a;
                    }
                ]
            }  
        }
    }
}

component ticket_book_idCard inherits Rectangle {
    height: 50phx;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "ID CARD: ";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
                clicked => {
                }
            }
        }
        Rectangle {
            background: black;
            horizontal-stretch: 7;
            editPlaneIDInput := LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: "Enter the id card";
                edited => {
                    ticket-global.selftext_tmp = ticket-global.getCPP_information(self.text);

                    CONST-FUNCTION-GLOBAL.show_warning = ticket-global.selftext_tmp != "" ? true : false;
                    CONST-FUNCTION-GLOBAL.message_warning = ticket-global.selftext_tmp != "" ? ticket-global.selftext_tmp : ""; 
                    
                    ticket-global.book_information_idCard = ticket-global.selftext_tmp == "" ? self.text : ticket-global.book_information_idCard;
                    self.text = ticket-global.book_information_idCard;

                    if (ticket-global.book_information_sex == "MALE") {
                        ticket-global.chose_sex = 1;
                    }
                    if (ticket-global.book_information_sex == "FEMALE") {
                        ticket-global.chose_sex = 2;
                    }
                }
            }
        }
    }
}

component ticket_book_lastName inherits Rectangle {
    height: 50phx;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "LAST NAME:";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
        }
        Rectangle {
            background: black;
            horizontal-stretch: 7;
            if ticket-global.book_information_lastName == "Enter the last name" : LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: ticket-global.book_information_lastName;
                edited => {
                    self.text = ticket-global.standardize(self.text);
                    ticket-global.selftext_tmp = ticket-global.getCPP_information_book_lastName(self.text);
                    CONST-FUNCTION-GLOBAL.show_warning = ticket-global.selftext_tmp != "" ? true : false;
                    CONST-FUNCTION-GLOBAL.message_warning = ticket-global.selftext_tmp != "" ? ticket-global.selftext_tmp : ""; 
                    
                    ticket-global.book_information_lastNameKey = ticket-global.selftext_tmp == "" ? self.text : ticket-global.book_information_lastNameKey;
                    self.text = ticket-global.book_information_lastNameKey;
                    ticket-global.s1 = self.text;
                }
            }
            if ticket-global.book_information_lastName != "Enter the last name" : Text {
                width: 100%; height: 100%;
                horizontal-alignment: center;
                vertical-alignment: center;
                font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                text: ticket-global.book_information_lastName;
                color: white;
            }
        }
    }
}

component ticket_book_firstName inherits Rectangle {
    height: 50phx;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "FIRST NAME:";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
        }
        Rectangle {
            background: black;
            horizontal-stretch: 7;
            if ticket-global.book_information_firstName == "Enter the First name" : LineEdit {
                width: 100%; height: 100%;font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
                placeholder-text: ticket-global.book_information_firstName;
                edited => {
                    self.text = ticket-global.standardize(self.text);
                    ticket-global.selftext_tmp = ticket-global.getCPP_information_book_firstName(self.text);
                    CONST-FUNCTION-GLOBAL.show_warning = ticket-global.selftext_tmp != "" ? true : false;
                    CONST-FUNCTION-GLOBAL.message_warning = ticket-global.selftext_tmp != "" ? ticket-global.selftext_tmp : ""; 
                    
                    ticket-global.book_information_firstNameKey = ticket-global.selftext_tmp == "" ? self.text : ticket-global.book_information_firstNameKey;
                    self.text = ticket-global.book_information_firstNameKey;
                    ticket-global.s2 = self.text;
                }
            }
            if ticket-global.book_information_firstName != "Enter the First name" : Text {
                width: 100%; height: 100%;
                horizontal-alignment: center;
                vertical-alignment: center;
                font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                text: ticket-global.book_information_firstName;
                color: white;
            }
        }
    }
}

component ticket_book_sex inherits Rectangle {
    height: 100phx;
    background: rgb(255, 255, 255, 0.5);
    if (ticket-global.book_information_sex == "Enter the Sex") : VerticalLayout { 
        alignment: center;
        spacing: 10phx;
        padding: 10phx;
        HorizontalLayout {
            alignment: center;
            Text {
                text: "SEX";
                font-size: 25phx;
                color: black;
                font-weight: 600;
            }
        }
        HorizontalLayout {
            alignment: center;
            spacing: 10phx;
            padding: 10phx;
            Rectangle {
                touch1  := TouchArea {
                    clicked => {
                        ticket-global.chose_sex = ticket-global.book_information_sex == "FEMALE" ? 2 : 1;
                    }
                }
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    rec1 := Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: white;
                    }
                    text1 := Text {
                        text: "MALE    ";
                        color: white;
                        font-size: 20phx;
                    }
                }
                states [
                    has-hover when touch1.has-hover && ticket-global.book_information_sex == "Enter the Sex": {
                        text1.color : rgb(0, 0, 255);
                        rec1.background : rgb(0, 0, 255);
                    }
                    ac when ticket-global.chose_sex == 1 : {
                        text1.color : rgb(0, 0, 255);
                        rec1.background : rgb(0, 0, 255);
                    }
                    notAc when ticket-global.chose_sex == 0 : {
                        text1.color : white;
                        rec1.background : white;
                    }
                ]
            }
            Rectangle {
                touch2  := TouchArea {
                    clicked => {
                        ticket-global.chose_sex = ticket-global.book_information_sex == "MALE" ? 1 : 2;
                    }
                }
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    rec2 := Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: white;
                    }
                    text2 := Text {
                        text: "FEMALE";
                        color: white;
                        font-size: 20phx;
                    }
                }
                states [
                    has-hover when touch2.has-hover && ticket-global.book_information_sex == "Enter the Sex" : {
                        text2.color : rgb(0, 0, 255);
                        rec2.background : rgb(0, 0, 255);
                    }
                    ac when ticket-global.chose_sex == 2 : {
                        text2.color : rgb(0, 0, 255);
                        rec2.background : rgb(0, 0, 255);
                    }
                    notAc when ticket-global.chose_sex == 0 : {
                        text2.color : white;
                        rec2.background : white;
                    }
                ]
            }
        }
    }
    if (ticket-global.book_information_sex == "MALE") : VerticalLayout { 
        alignment: center;
        spacing: 10phx;
        padding: 10phx;
        HorizontalLayout {
            alignment: center;
            Text {
                text: "SEX";
                font-size: 25phx;
                color: black;
                font-weight: 600;
            }
        }
        HorizontalLayout {
            alignment: center;
            spacing: 10phx;
            padding: 10phx;
            Rectangle {
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: rgb(0, 0, 255);
                    }
                    Text {
                        text: "MALE    ";
                        color: rgb(0, 0, 255);
                        font-size: 20phx;
                    }
                }
            }
            Rectangle {
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: white;
                    }
                    Text {
                        text: "FEMALE";
                        color: white;
                        font-size: 20phx;
                    }
                }
            }
        }
    }
    if (ticket-global.book_information_sex == "FEMALE") : VerticalLayout { 
        alignment: center;
        spacing: 10phx;
        padding: 10phx;
        HorizontalLayout {
            alignment: center;
            Text {
                text: "SEX";
                font-size: 25phx;
                color: black;
                font-weight: 600;
            }
        }
        HorizontalLayout {
            alignment: center;
            spacing: 10phx;
            padding: 10phx;
            Rectangle {
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: white;
                    }
                    Text {
                        text: "MALE    ";
                        color: white;
                        font-size: 20phx;
                    }
                }
            }
            Rectangle {
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: rgb(0, 0, 255);
                    }
                    Text {
                        text: "FEMALE";
                        color: rgb(0, 0, 255);
                        font-size: 20phx;
                    }
                }
            }
        }
    }
}

component ticket_book_buttonNext inherits Rectangle {
        width: 40%;
        height: 50phx;
        background: #FA8072;

        Text {
            text: "Next";
            color: white;
            font-size: 30phx;
            font-weight: 500;
        }
        touch1 := TouchArea {
            clicked => {
                if (ticket-global.cancel_information_lastName != "Enter the last name") {
                    ticket-global.book_information_lastNameKey = ticket-global.cancel_information_lastName;
                    ticket-global.book_information_firstNameKey = ticket-global.cancel_information_firstName;
                }
                if (ticket-global.book_information_idCard == "" || ticket-global.book_information_lastNameKey == "" || ticket-global.book_information_firstNameKey == "" || ticket-global.chose_sex == 0) {
                    CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("Required information is incomplete");
                }
                if (ticket-global.book_information_idCard != "" && ticket-global.book_information_lastNameKey != "" && ticket-global.book_information_firstNameKey != "" && ticket-global.chose_sex != 0) {
                    if (ticket-global.buttonNext_book_checkIdCard(ticket-global.book_information_idCard) == false) {
                        CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("Citizen identification numbers are\nconsistently thirteen digits");
                    }
                    if (ticket-global.buttonNext_book_checkIdCard(ticket-global.book_information_idCard)) {
                        CONST-FUNCTION-GLOBAL.show_confirm_c_f = true;
                    }
                }
            }
        }
        states [
            has-hover when touch1.has-hover : {
                background: #ff1c03;
            }
        ]
    
}

component ticket_book_boxFunction inherits Rectangle {
    background: rgb(0, 0, 0, 0.6);
    border-color: #FA8072;
    border-width: 5phx;
    VerticalLayout {
        padding: 20phx;
        spacing: 20phx;
        alignment: center;
            VerticalBox {
                alignment: center;
                HorizontalLayout {
                    alignment: center;
                    Text {
                        text: "BOOK";
                        font-size: 50phx;
                        font-weight: 600;
                        color: white;
                    }
                }
                HorizontalLayout {
                    alignment: center;
                    Text {
                        text: @tr("Seat Number: {}", ticket-global.chose_ticketSeat != -1 ? ticket-global.chose_ticketSeat : 0);
                        font-size: 30phx;
                        font-weight: 500;
                        color: white;
                    }
                }
            }
        
        VerticalLayout {
            alignment: center;
            spacing: 20phx;
            ticket_book_idCard {}
            ticket_book_lastName {}
            ticket_book_firstName {}
            ticket_book_sex {}
        }
        HorizontalLayout {
            alignment: center;
            spacing: 20phx;
            padding: 20phx;
            Rectangle {
                width: 40%;
                height: 50phx;
                background: #FA8072;
                Text {
                    text: "Back";
                    color: white;
                    font-size: 30phx;
                    font-weight: 500;
                }
                touch := TouchArea {
                    clicked => {
                        ticket-global.chose_ticketFunction = 0;
                    }
                }
                states [
                    has-hover when touch.has-hover : {
                        background: #ff1c03;
                    }
                ]
            }
            ticket_book_buttonNext {}
        }  
        
    }
}

component ticket_cancel_idCard inherits Rectangle {
    height: 50phx;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "ID CARD: ";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
            }
        }
        Rectangle {
            background: black;
            width: 60%;
            
            Text {
                text: ticket-global.cancel_information_idCard;
                font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
            }
        }
    }
    
}

component ticket_cancel_firstName inherits Rectangle {
    height: 50phx;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "FIRST NAME: ";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
            }
        }
        Rectangle {
            background: black;
            width: 60%;
            Text {
                text: ticket-global.cancel_information_firstName;
                font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
            }
        }
    }
}

component ticket_cancel_lastName inherits Rectangle {
    height: 50phx;
    HorizontalLayout {
        Rectangle {
            width : 40%;
            background: #C0C0C0;
            Text {text: "LAST NAME: ";font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;horizontal-alignment: center;}
            TouchArea {
            }
        }
        Rectangle {
            background: black;
            width: 60%;
            Text {
                text: ticket-global.cancel_information_lastName;
                font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                horizontal-alignment: center;
            }
        }
    }
}

component ticket_cancel_sex inherits Rectangle {
    height: 100phx;
    background: rgb(255, 255, 255, 0.5);
    VerticalLayout { 
        alignment: center;
        spacing: 10phx;
        padding: 10phx;
        HorizontalLayout {
            alignment: center;
            Text {
                text: "SEX";
                font-size: 25phx;
                color: black;
                font-weight: 600;
            }
        }
        if ticket-global.cancel_information_sex == 1 : HorizontalLayout {
            alignment: center;
            spacing: 10phx;
            padding: 10phx;
            Rectangle {
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: rgb(0, 0, 255);
                    }
                    Text {
                        text: "MALE    ";
                        color: rgb(0, 0, 255);
                        font-size: 20phx;
                    }
                }
            }
            Rectangle {
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: white;
                    }
                    Text {
                        text: "FEMALE";
                        color: white;
                        font-size: 20phx;
                    }
                }
            }
        }
        if ticket-global.cancel_information_sex == 2 : HorizontalLayout {
            alignment: center;
            spacing: 10phx;
            padding: 10phx;
            Rectangle {
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: white;
                    }
                    Text {
                        text: "MALE    ";
                        color: white;
                        font-size: 20phx;
                    }
                }
            }
            Rectangle {
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: rgb(0, 0, 255);
                    }
                    Text {
                        text: "FEMALE";
                        color: rgb(0, 0, 255);
                        font-size: 20phx;
                    }
                }
            }
        }
        if ticket-global.cancel_information_sex == 0 : HorizontalLayout {
            alignment: center;
            spacing: 10phx;
            padding: 10phx;
            Rectangle {
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: white;
                    }
                    Text {
                        text: "MALE    ";
                        color: white;
                        font-size: 20phx;
                    }
                }
            }
            Rectangle {
                HorizontalLayout {
                    alignment: center;
                    spacing: 10phx;
                    Rectangle {
                        width: 20phx;
                        height: 20phx;
                        background: white;
                    }
                    Text {
                        text: "FEMALE";
                        color: white;
                        font-size: 20phx;
                    }
                }
            }
        }
    }
}

component ticket_cancel_buttonNext inherits Rectangle{
    width: 40%;
    height: 50phx;
    background: #FA8072;
    Text {
        text: "Next";
        color: white;
        font-size: 30phx;
        font-weight: 500;
    }
    touch := TouchArea {
        clicked => {
            CONST-FUNCTION-GLOBAL.show_confirm_DLT_PLANE = true;
        }
    }
    states [
        has-hover when touch.has-hover : {
            background: #ff1c03;
        }
    ]
}

component ticket_cancel_buttonBack inherits Rectangle{
    width: 40%;
    height: 50phx;
    background: #FA8072;
    Text {
        text: "Back";
        color: white;
        font-size: 30phx;
        font-weight: 500;
    }
    touch := TouchArea {
        clicked => {
            ticket-global.chose_ticketFunction = 0;
        }
    }
    states [
        has-hover when touch.has-hover : {
            background: #ff1c03;
        }
    ]   
}

component ticket_cancel_boxFunction inherits Rectangle {
    background: rgb(0, 0, 0, 0.6);
    border-color: #FA8072;
    border-width: 5phx;
    VerticalLayout {
        padding: 20phx;
        spacing: 20phx;
        alignment: center;
        
            VerticalBox {
                alignment: center;
                HorizontalLayout {
                    alignment: center;
                    Text {
                        text: "CANCEL";
                        font-size: 50phx;
                        font-weight: 600;
                        color: white;
                    }
                }
                HorizontalLayout {
                    alignment: center;
                    Text {
                        text: @tr("Seat Number: {}", ticket-global.chose_ticketSeat != -1 ? ticket-global.chose_ticketSeat : 0);
                        font-size: 30phx;
                        font-weight: 500;
                        color: white;
                    }
                }
            }
        
        VerticalLayout {
            alignment: center;
            spacing: 20phx;
            padding: 20phx;
            ticket_cancel_idCard {}
            ticket_cancel_lastName {}
            ticket_cancel_firstName {}
            ticket_cancel_sex {}
        }
        HorizontalLayout {
            alignment: center;
            spacing: 20phx;
            padding: 20phx;
            ticket_cancel_buttonBack {}
            ticket_cancel_buttonNext {}
        }  
        
    }
}

component ticket_boxItem_book inherits Rectangle {
    touch := TouchArea {
        clicked => {
            if (ticket-global.chose_ticketSeat == -1) {
                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("Select a seat to reserve");
            }
            if (ticket-global.z[ticket-global.chose_ticketSeat].check) {
                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("The seat has already been reserved\n         Please choose another");
                ticket-global.chose_ticketSeat = -1;
            }
            ticket-global.chose_ticketFunction = ticket-global.chose_ticketSeat == -1 ? 0 : 1;
            ticket-global.chose_ticketSeatTmp = ticket-global.chose_ticketSeat != -1 ? ticket-global.chose_ticketSeat : ticket-global.chose_ticketSeatTmp;
        }
    }
    border-color: white;
    border-width: 4phx;
    width: 320phx;
    height: 70phx;
    background: #FA8072;
    opacity: 1;
    text := Text {
        text: "Book";
        color: black;
        font-size: 25phx;
        font-weight: 500;
    }
    states [
        has-hover when touch.has-hover : {
            background: black;
            text.color: #FA8072;
        }
    ]
}

component ticket_boxItem_cancel inherits Rectangle {
    touch := TouchArea {
        clicked => {
            if (ticket-global.chose_ticketSeat == -1) {
                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("Select seat to cancel");
            }
            if (ticket-global.z[ticket-global.chose_ticketSeat].check == false) {
                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("Unreserved seats cannot be canceled\n        Please select a reserved seat");
                ticket-global.chose_ticketSeat = -1;
            }
            ticket-global.chose_ticketFunction = ticket-global.chose_ticketSeat == -1 ? 0 : 2;
            ticket-global.chose_ticketSeatTmp = ticket-global.chose_ticketSeat != -1 ? ticket-global.chose_ticketSeat : ticket-global.chose_ticketSeatTmp;
        }
    }
        
    width: 320phx;
    height: 70phx;
    background: #FA8072;
    border-color: white;
    border-width: 4phx;
    text := Text {
        text: "Cancel";
        color: black;
        font-size: 25phx;
        font-weight: 500;
    }
    states [
        has-hover when touch.has-hover : {
            background: black;
            text.color: #FA8072;
        }
    ]
}

component ticket_boxItem_flightList inherits Rectangle {
    touch := TouchArea {
        clicked => {
            ticket-global.chose_ticketFunction = 0;
            CONST-FUNCTION-GLOBAL.page_number_SHOW = 1;
        }
    }
        
    width: 180phx;
    height: 50phx;
    background: rgba(255,255,255, 0.6);
    border-color: white;
    border-width: 4phx;
    text := Text {
        text: "Flight List";
        color: black;
        font-size: 25phx;
        font-weight: 500;
    }
    states [
        has-hover when touch.has-hover : {
            background: rgba(255,255,255, 1);
            text.color: black;
        }
    ]
}

component ticket_boxItem_passengerList inherits Rectangle {
    touch := TouchArea {
        clicked => {
            ticket-global.seat_passenger = -1;
            ticket-global.chose_passengerListFlight_list = -1;
            ticket-global.chose_ticketFunction = 0;
            ticket-global.chose_function_passengerListFlight_ticket = 2;
            ticket-global.passengerListFlight_sort(ticket-global.chose_passengerListFlight_sort);
        }
    }
        
    width: 320phx;
    height: 50phx;
    background: rgba(255,255,255, 0.6);
    border-color: white;
    border-width: 4phx;
    text := Text {
        text: @tr("Passenger List({})", ticket-global.flightCode);
        color: black;
        font-size: 25phx;
        font-weight: 500;
    }
    states [
        has-hover when touch.has-hover : {
            background: rgba(255,255,255, 1);
            text.color: black;
        }
    ]
}

component ticket_boxItem_Annotation inherits Rectangle {
    border-color: white;
    border-width: 4phx;
    background: #FA8072;
    VerticalBox {
        Text {
            text: "Annotation";
            font-size: 25phx;
            color: black;
            font-weight: 400;
        }
        HorizontalBox {
            Rectangle {
                width: 20phx;
                height: 20phx;
                background: gray;
            }
            Text {
                text: "Empty seat";
                font-size: 20phx;
                color: black;
                font-weight: 400;
            }
        }
        HorizontalBox {
            Rectangle {
                width: 20phx;
                height: 20phx;
                background: #2b5ee7;
            }
            Text {
                text: "Reserved seat";
                font-size: 20phx;
                color: black;
                font-weight: 400;
            }
        }
        HorizontalBox {
            Rectangle {
                width: 20phx;
                height: 20phx;
                background: #0be68a;
            }
            Text {
                text: "Selected seat (Available)";
                font-size: 20phx;
                color: black;
                font-weight: 400;
            }
        }
        HorizontalBox {
            Rectangle {
                width: 20phx;
                height: 20phx;
                background: #bc0895;
            }
            Text {
                text: "Selected seat (Unavailable)";
                font-size: 20phx;
                color: black;
                font-weight: 400;
            }
        }
    }
}

component ticket_boxItem inherits Rectangle {
    background: rgba(255,255,255, 0.2);
    border-color: #FA8072;
    border-width: 5phx;
    HorizontalLayout {
        alignment: center;
        VerticalLayout {
            padding: 10phx;
            spacing: 10phx;
            alignment: center;
            ticket_boxItem_book {}
            ticket_boxItem_cancel {}
            ticket_boxItem_Annotation {}
        }
    }
}

component ticket_list_box inherits Rectangle{
    VerticalLayout {
        alignment: start;
        HorizontalLayout {
            alignment: center;
            spacing: 10px;
            ticket-list {
                width: 79.5%;
                height: 101%;
            }
            if ticket-global.chose_ticketFunction == 0 : ticket_boxItem {
                width: 20%;
            }
            if ticket-global.chose_ticketFunction == 1 : ticket_book_boxFunction {
                width: 20%;
            }
            if ticket-global.chose_ticketFunction == 2 : ticket_cancel_boxFunction {
                width: 20%;
            }
        }
    }
    
}

component passengerListFlight_list_item  inherits Rectangle {
    in-out property <int> stt;
    in-out property <int> seat;
    in-out property <string> idCard;
    in-out property <string> name;
    in-out property <string> sex;
    in-out property <bool> check;
    drop-shadow-blur: 5phx;
    width: 100%;
    height: 40phx;
    background: rgba(255,255,255,0.9);
    itemArea := TouchArea {
        clicked => {
            check = ticket-global.chose_passengerListFlight_list == stt ? false : true;
            ticket-global.chose_passengerListFlight_list = !check ? -1 : stt;
            ticket-global.seat_passenger = ticket-global.passengerListFlight_getCPP_seat(ticket-global.passengerList[ticket-global.chose_passengerListFlight_list - 1].IDCard);
            
        }
    }
    HorizontalLayout {
        alignment: space-around;
        Rectangle {width: 10%; height: 100%; border-width: 1phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: stt; color : black; font-weight: 500;}}
        Rectangle {width: 10%; height: 100%; border-width: 1phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: seat; color : black; font-weight: 500;}}
        Rectangle {width: 25%; height: 100%; border-width: 1phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: name; color : black; font-weight: 500;}}
        Rectangle {width: 25%; height: 100%; border-width: 1phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: idCard; color : black; font-weight: 500;}}
        Rectangle {width: 10%; height: 100%; border-width: 1phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: sex; color : black; font-weight: 500;}}
    }
    states [
        active-hover when itemArea.has-hover && stt != ticket-global.chose_passengerListFlight_list: {
            background : #FF9999;
        }
        active-hover-chosse when itemArea.has-hover && stt == ticket-global.chose_passengerListFlight_list : {
            background : #1f92c7;
        }
        chosse when stt == ticket-global.chose_passengerListFlight_list : {
            background: #1f92c7;
        }
    ]
}

component passengerListFlight_list inherits Rectangle {
    VerticalLayout {
        VerticalLayout {
            VerticalLayout {
                padding: 4px;
                Rectangle {
                    drop-shadow-blur: 5phx;
                    drop-shadow-color: #333;
                    drop-shadow-offset-y: 2phx;
                    width: 100%;
                    height: 40phx;
                    background: #333;
                    HorizontalLayout {
                        alignment: space-around;
                        Rectangle {width: 10%;  height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "STT"; color : white;}}
                        Rectangle {width: 10%;  height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "SEAT"; color : white;}}
                        Rectangle {width: 25%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "NAME"; color : white;}}
                        Rectangle {width: 25%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "ID CARD"; color : white;}}
                        Rectangle {width: 10%; height: 100%; border-width: 3phx; border-color: whitesmoke; Text {font-size: CONST-FUNCTION-GLOBAL.FONTSIZE ;text: "SEX"; color : white;}} }  
                }
            }
            ListView {
                width: 100%;
                for data[index] in ticket-global.passengerList : VerticalLayout {
                    padding: 4phx;
                    passengerListFlight_list_item {
                        stt : index + 1;
                        seat: data.seat;
                        idCard: data.IDCard;
                        name: data.firstName + " " + data.lastName;
                        sex: data.sex == 0 ? "MALE" : "FEMALE";
                    }   

                }
            }
        }
    }
}

component passengerListFlight_boxSort_ID inherits Rectangle{
    drop-shadow-blur: 5phx;
    drop-shadow-color: #333;
    drop-shadow-offset-y: 2phx;
    width: 100%;
    height: 60phx;
    background: #333;
    border-width: 3phx; 
    border-color: whitesmoke;
    t := Text {
        text: "SORT_BY_ID";
        color: white;
        font-size: 20phx;
    }
    touch := TouchArea {
        clicked => {
            ticket-global.chose_passengerListFlight_sort = ticket-global.chose_passengerListFlight_sort == 1 ? 0 : 1;
            ticket-global.passengerListFlight_sort(ticket-global.chose_passengerListFlight_sort);
            if (ticket-global.chose_passengerListFlight_sort == 0) {
                ticket-global.passengerListFlight_search(ticket-global.passengerListFlight_searchTmp);
            }
            ticket-global.chose_passengerListFlight_list = -1;
            ticket-global.seat_passenger = -1;
        }
    }
    states [
        has-hover when touch.has-hover : {
            background: whitesmoke;
            border-color: #333;
            t.color: black;
        }
        ac when ticket-global.chose_passengerListFlight_sort == 1 : {
            background: whitesmoke;
            border-color: #333;
            t.color: black;
        }
    ]
}

component passengerListFlight_boxSort_NAME inherits Rectangle{
    drop-shadow-blur: 5phx;
    drop-shadow-color: #333;
    drop-shadow-offset-y: 2phx;
    width: 100%;
    height: 60phx;
    background: #333;
    border-width: 3phx; 
    border-color: whitesmoke;
    t := Text {
        text: "SORT_BY_NAME";
        color: white;
        font-size: 20phx;
    }
    touch := TouchArea {
        clicked => {
            ticket-global.chose_passengerListFlight_sort = ticket-global.chose_passengerListFlight_sort == 2 ? 0 : 2;
            ticket-global.passengerListFlight_sort(ticket-global.chose_passengerListFlight_sort);
            if (ticket-global.chose_passengerListFlight_sort == 0) {
                ticket-global.passengerListFlight_search(ticket-global.passengerListFlight_searchTmp);
            }
            ticket-global.chose_passengerListFlight_list = -1;
            ticket-global.seat_passenger = -1;
        }
    }
    states [
        has-hover when touch.has-hover : {
            background: whitesmoke;
            border-color: #333;
            t.color: black;
        }
        ac when ticket-global.chose_passengerListFlight_sort == 2 : {
            background: whitesmoke;
            border-color: #333;
            t.color: black;
        }
    ]
}

component passengerListFlight_button_allPassenger inherits Rectangle {
    drop-shadow-blur: 5phx;
    drop-shadow-color: #333;
    drop-shadow-offset-y: 2phx;
    width: 100%;
    height: 60phx;
    background: #333;
    border-width: 3phx; 
    border-color: whitesmoke;
    t := Text {
        text: "ALL PASENGER";
        color: white;
        font-size: 20phx;
    }
    touch := TouchArea {
        clicked => {
            CONST-FUNCTION-GLOBAL.page_number_SHOW = 8;
        }
    }
    states [
        has-hover when touch.has-hover : {
            background: whitesmoke;
            border-color: #333;
            t.color: black;
        }
    ]
}

component passengerListFlight_button_cancel inherits Rectangle {
    drop-shadow-blur: 5phx;
    drop-shadow-color: #333;
    drop-shadow-offset-y: 2phx;
    width: 100%;
    height: 60phx;
    background: #333;
    border-width: 3phx; 
    border-color: whitesmoke;
    t := Text {
        text: "CANCEL";
        color: white;
        font-size: 20phx;
    }
    touch := TouchArea { 
        clicked => {
            if (ticket-global.information.info.IDPlane == "########" || ticket-global.flightStatus != 1) {
                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("Airplane isn't available");
            }
            else {
                if (ticket-global.seat_passenger == -1 || ticket-global.chose_passengerListFlight_list == -1) {
                    CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("You haven't selected any seat to cancel");
                }
                if (ticket-global.seat_passenger != -1 && ticket-global.chose_passengerListFlight_list != -1) {
                    CONST-FUNCTION-GLOBAL.page_number_SHOW = 4;
                    ticket-global.chose_function_passengerListFlight_ticket = 1;
                    ticket-global.chose_ticketFunction = 2;

                    ticket-global.chose_ticketSeatTmp = ticket-global.seat_passenger;
                    ticket-global.chose_passengerListFlight_list = -1;

                    ticket-global.getCPP_information_cancel(ticket-global.seat_passenger);
                    ticket-global.chose_ticketSeat = ticket-global.seat_passenger;
                }
            }
        }
    }
    states [
        has-hover when touch.has-hover : {
            background: whitesmoke;
            border-color: #333;
            t.color: black;
        }
    ]
}

component passengerListFlight_button_flightList inherits Rectangle {
    drop-shadow-blur: 5phx;
    drop-shadow-color: #333;
    drop-shadow-offset-y: 2phx;
    background: #333;
    border-width: 3phx; 
    border-color: whitesmoke;
    t := Text {
        text: "FLIGHT LIST";
        color: white;
        font-size: 20phx;
    }
    touch := TouchArea {
        clicked => {
            CONST-FUNCTION-GLOBAL.page_number_SHOW = 1;
        }
    }
    states [
        has-hover when touch.has-hover : {
            background: whitesmoke;
            border-color: #333;
            t.color: black;
        }
    ]
}

component passengerListFlight_button_passengerList inherits Rectangle {
    drop-shadow-blur: 5phx;
    drop-shadow-color: #333;
    drop-shadow-offset-y: 2phx;
    background: #333;
    border-width: 3phx; 
    border-color: whitesmoke;
    t := Text {
        text: "PASSENGER LIST";
        color: white;
        font-size: 20phx;
    }
    touch := TouchArea {
        clicked => {
            CONST-FUNCTION-GLOBAL.page_number_SHOW = 0;
        }
    }
    states [
        has-hover when touch.has-hover : {
            background: whitesmoke;
            border-color: #333;
            t.color: black;
        }
    ]
}

component passengerListFlight_information inherits Rectangle {
    padding: 10phx;
    background: #edd4d4;
    width: 100%;
    VerticalLayout {
        padding: 10phx;
        spacing: 10phx;
        alignment: center;
        VerticalLayout {
            padding: 10phx;
            spacing: 10phx;
            alignment: center;
            HorizontalLayout {
                alignment: center;
                Text { 
                    text: "INFORMATION";
                    color: black;
                    font-size: 30phx;
                }
            }
            HorizontalBox {
                alignment: center;
                if ticket-global.seat_passenger != -1 : Text {
                    text: @tr("SEAT: {}", ticket-global.chose_passengerListFlight_sort != -1 ? ticket-global.seat_passenger : "---");
                    color: black;
                    font-size: CONST-FUNCTION-GLOBAL.FONTSIZE + 10phx;
                }
                if ticket-global.seat_passenger == -1 : Text {
                    text: "SEAT: ---";
                    color: black;
                    font-size: CONST-FUNCTION-GLOBAL.FONTSIZE + 10phx;
                }
            }
            
            HorizontalLayout {
                spacing: 10phx;
                alignment: center;
                VerticalLayout {
                        alignment: center;
                        spacing: 10phx;
                        passengerListFlight_boxSort_ID {
                            width: 250phx;
                        }
                        passengerListFlight_boxSort_NAME {
                            width: 250phx;
                        }
                        passengerListFlight_button_allPassenger {
                            width: 250phx;
                        }
                        passengerListFlight_button_cancel {
                            width: 250phx;
                        }
                }
                VerticalLayout {
                    spacing: 10phx;
                    passengerListFlight_button_flightList {
                        width: 200phx;
                        height: 130phx;
                    }
                    passengerListFlight_button_passengerList {
                        width: 200phx;
                        height: 130phx;
                    }
                }
            }
            
        }
    }
}

component passengerListFlight_search inherits Rectangle {
        border-width: 4phx;
        border-color: #edd4d4;
        width: 100%;
        VerticalLayout {
            alignment: center;
            padding: 10phx;
            spacing: 10phx;
            HorizontalLayout {
                alignment: center;
                Text {
                    width: 100%;
                    text: "                          SEARCH";
                    font-size: 30phx;
                    font-weight: 400;
                }
            }
            HorizontalLayout {
                alignment: center;
                spacing: 12phx;
                Rectangle {
                    Text {text: "ID Card";color: white;font-weight: 700;font-size: 20phx;}
                }
                Rectangle {
                    background: #edd4d477;
                    height: 40phx;
                    width: 400phx;
                    input := LineEdit {
                        enabled: true;
                        width: 100%;
                        height: 100%;
                        placeholder-text: "Enter ID Card";
                        horizontal-alignment: center;
                        font-size: CONST-FUNCTION-GLOBAL.FONTSIZE;
                        edited => {
                            if (ticket-global.passengerListFlight_checkIdCard(self.text) != "") {
                                self.text = ticket-global.passengerListFlight_searchTmp;
                                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("Nhập Sai");
                            }
                            ticket-global.passengerListFlight_searchTmp = self.text;
                            ticket-global.passengerListFlight_search(self.text);
                            
                        }
                        states [
                            unabled_ when CONST-FUNCTION-GLOBAL.page_number_SHOW == 9 : {
                                enabled : false;
                            }
                            enabled_ when CONST-FUNCTION-GLOBAL.page_number_SHOW != 9 : {
                                enabled : true;
                            }
                        ]
                    }
                }
            }
        }

}

component passengerListFlight_information_search inherits Rectangle {
    width: 100%;
    background: rgba(255,255,255, 0.2);
    border-color: black;
    border-width: 3phx;
    HorizontalLayout {
        alignment: center;
        VerticalLayout {
            padding: 10phx;
            spacing: 20phx;
            alignment: center;
            passengerListFlight_search {}
            passengerListFlight_information {}
        }
    }
}

component passengerListFlight_list_information_search inherits Rectangle{
    VerticalLayout {
        alignment: start;
        HorizontalLayout {
            alignment: center;
            spacing: 10px;
            passengerListFlight_list {
                width: 70%;
                height: 101%;
            }
            passengerListFlight_information_search {
                width: 29.5%;
            }
        }
    }
    
}

component passengerListFlight_buttonTicket inherits Rectangle {
    touch := TouchArea {
        clicked => {
            ticket-global.chose_ticketSeat = -1;
            if (ticket-global.information.info.IDPlane == "########" || ticket-global.flightStatus != 1) {
                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("Airplane isn't available");
            }
            else {
                CONST-FUNCTION-GLOBAL.page_number_SHOW = 4;
                ticket-global.chose_function_passengerListFlight_ticket = 1;
            }
        }
    }
        
    width: 180phx;
    height: 50phx;
    background: rgba(255,255,255, 0.6);
    border-color: white;
    border-width: 4phx;
    text := Text {
        text: "Ticket";
        color: black;
        font-size: 25phx;
        font-weight: 500;
    }
    states [
        has-hover when touch.has-hover : {
            background: rgba(255,255,255, 1);
            text.color: black;
        }
    ]
}

component ticketPage inherits Rectangle {
    if ticket-global.chose_function_passengerListFlight_ticket == 1 : Rectangle {
        ticket_boxItem_passengerList {
            x : 10phx;
            y : 40phx;
        }
        ticket_boxItem_flightList {
            x : 340phx;
            y : 40phx;
        }
    }
    if ticket-global.chose_function_passengerListFlight_ticket == 2 : Rectangle { 
        passengerListFlight_buttonTicket {
            x : 10phx;
            y : 40phx;
        }
    }
    HorizontalLayout {
        alignment: center;
        padding-top: 80phx;
        padding-bottom: 0;
        padding-left: 0;
        padding-right: 0;
        VerticalLayout {
            spacing: 10phx;
            padding: 10phx;
            alignment: center;
            ticket-airlines-info {
                width: 100%;
                height: 10%;
            }
            if ticket-global.chose_function_passengerListFlight_ticket == 2 : Rectangle {
                height: 78%;
                HorizontalLayout {
                    alignment: center;
                    padding-bottom: 0;
                    padding-left: 0;
                    padding-right: 0;
                    VerticalLayout {
                        spacing: 10phx;
                        padding: 10phx;
                        alignment: center;
                        passengerListFlight_list_information_search {
                            height: 90%;
                            width: 100%;
                        }
                    }
                }
            }
            if ticket-global.chose_function_passengerListFlight_ticket == 1 : ticket-list-box {
                height: 78%;
            }
        }
    }
    states [
        show when CONST-FUNCTION-GLOBAL.page_number_SHOW == 4 : {
            visible : true;
        }
        hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != 4 : {
            visible : false;
        }
    ]
}

export component homePage inherits Window {
    backgroundAPP := Image {
        width: 100%;
        height: 100%;
        source: @image-url("../img/background.jpg");
        z : 0;
        opacity: 1;
    }
    homepage := Rectangle {
        background: red;
        width: 100%;
        height: 100%;
        Image {
            source: @image-url("../img/background.jpg");
            width: 100%;
            height: 100%;
        }
        Rectangle {
            width: 300phx;
            height: 100phx;
            background: rgba(255,255,255, 0.6);
            border-color: white;
            border-width: 6px;
            border-radius: 24phx;
            Text {text: "LOGIN";font-size: 24phx; font-weight: 700; color: #333;}
            area := TouchArea {
                clicked => {
                    CONST-FUNCTION-GLOBAL.page_number_SHOW = 0;
                    functionAPP.exit();
                }
            }
            states [
                click when area.pressed : {
                    width : 285phx;
                    height: 95phx;
                }
            ]
        }
        z : 10;
        states [
            show when CONST-FUNCTION-GLOBAL.page_number_SHOW == -1 : {
                visible : true;
            }
            hiden when CONST-FUNCTION-GLOBAL.page_number_SHOW != -1 : {
                visible : false;
            }
        ]
    }
    callback takeDataPlanePage_EditPlane_homePage();
    takeDataPlanePage_EditPlane_homePage => {
        editPlanePage.takeDataPlanePage_EditPlane_editPlane();
    }
    callback takeDataPlanePage_EditPassenger_homePage(); 
    takeDataPlanePage_EditPassenger_homePage => {
        editAllPassengerPage.takeDataPlanePage_EditPassenger_AllPassengerPage();
    }
    callback takeDAtaToEditFlight_homePage();
    takeDAtaToEditFlight_homePage => {
        editFLight.takeDATA_editFlightPage();
    }

    callback unFocusALLFoucus();
    unFocusALLFoucus => {
        focusBackground.focus();
    }

    width: CONST-FUNCTION-GLOBAL.MAX_WIDTH;
    height: CONST-FUNCTION-GLOBAL.MAX_HEIGHT;
    focusBackground := FocusScope {}

    warning := LogWarning {
        x: 0;
        y: 0;
        z: 100;
        visible: CONST-FUNCTION-GLOBAL.show_warning;
    }
    confirm_deletePlane_cancelTicket := LogComfirm {
        x : 0;
        y : 0;
        z : 100;
        visible: CONST-FUNCTION-GLOBAL.show_confirm_DLT_PLANE;
        message_confirm: CONST-FUNCTION-GLOBAL.page_number_SHOW == 4 ? "              Are you sure\nyou want to cancel your ticket?" :"Confirm aircraft deletion";
        CONFIRM_YES => {
            if (CONST-FUNCTION-GLOBAL.page_number_SHOW == 4) {
                ticket-global.buttonNext_cancel(ticket-global.cancel_information_idCard);
                ticket-global.chose_ticketFunction = 0;
            }
            else {
                functionAPP.handleDeletePlane();
                statistical-global.chosse = -1;
            }
            
        }
    }
    confirm_Edit_Plane := LogComfirm {
        x : 0;
        y : 0;
        z : 100;
        visible: CONST-FUNCTION-GLOBAL.show_confirm_E_PLANE;
        message_confirm: "Are you sure you want to save \nchanges to aircraft information?";
        CONFIRM_YES => {
            functionAPP.handleDataEdit_PlanePage();
        }
    }
    confirm_Edit_PassengerALL := LogComfirm {
        x : 0;
        y : 0;
        z : 100;
        visible: CONST-FUNCTION-GLOBAL.show_confirm_E_PassALL;
        message_confirm: "Do you really want to edit pasenger infomation";
        CONFIRM_YES => {
            functionAPP.handleEditPass_ALLPASS();
        }
    }
    comfirm_choosePlane_flight := LogComfirm {
        x: 0;
        y : 0;
        z : 100;
        visible: CONST-FUNCTION-GLOBAL.show_confirm_c_plane;
        message_confirm: "Choose this plane to make the flight";
        CONFIRM_YES => {
            if (functionAPP.checkPlaneAvailable(functionAPP.PlanePage_PlaneList[functionAPP.planePage_PlaneHasFocus].IDPlane) == false) {
                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("This plane is on another flight");
            }
            else {
                functionAPP.idPlaneHasChooseForFlight = functionAPP.PlanePage_PlaneList[functionAPP.planePage_PlaneHasFocus].IDPlane;
                CONST-FUNCTION-GLOBAL.modeChoosePlaneTOMakeFlight = false;
                functionAPP.planePage_PlaneHasFocus = -1;
                CONST-FUNCTION-GLOBAL.page_number_SHOW = 12;
            }
        }
    }
    comfirm_change_plane := LogComfirm {
        x : 0;
        y : 0;
        z : 100;
        visible: CONST-FUNCTION-GLOBAL.show_change_plane;
        message_confirm: "Change Plane make flight";
        CONFIRM_YES => {
            if (functionAPP.checkPlaneAvailable(functionAPP.PlanePage_PlaneList[functionAPP.planePage_PlaneHasFocus].IDPlane) == false) {
                CONST-FUNCTION-GLOBAL.SHOW_WARNING_ERORR("This plane is on another flight");
            }
            else {
                functionAPP.idPlaneHasChoose_new = functionAPP.PlanePage_PlaneList[functionAPP.planePage_PlaneHasFocus].IDPlane;
                CONST-FUNCTION-GLOBAL.modeCHancePlaneToMakeFlight = false;
                functionAPP.planePage_PlaneHasFocus = -1;
                CONST-FUNCTION-GLOBAL.page_number_SHOW = 13;
            }
        }
    }
    cofirm_edit_flight := LogComfirm {
        x : 0;
        y : 0;
        z : 100;
        visible: CONST-FUNCTION-GLOBAL.show_confirm_e_flight;
        message_confirm: "SAVE CHANGE THE FLIGHT";
        CONFIRM_YES => {
            functionAPP.handleEditFlight();
        }
    }
    comfirm_cancelFlight_bookTicket := LogComfirm {
        x: 0;
        y: 0;
        z: 100;
        visible: CONST-FUNCTION-GLOBAL.show_confirm_c_f;
        message_confirm: CONST-FUNCTION-GLOBAL.page_number_SHOW == 4 ? "          Are you sure\nyou want to book a ticket?" : "CANCEL FLIGHT";
        CONFIRM_YES => {
            if (CONST-FUNCTION-GLOBAL.page_number_SHOW == 4) {
                ticket-global.buttonNext_book(ticket-global.book_information_idCard, ticket-global.s1, ticket-global.s2, ticket-global.chose_sex, ticket-global.chose_ticketSeat);
                ticket-global.back();
            }
            else {
                functionAPP.handleCancelFlight();
            }
        }
    }
    HorizontalLayout {
        alignment: center;
        VerticalLayout {
            alignment: start;
            navbar := NAVBAR {z: 1;}
            Rectangle {
                Rectangle {
                    border-width: 4phx;
                    border-color: black;
                    width: 300phx;
                    height: 80phx;
                    background: rgba(255,255,255,0.4);
                    x : parent.width / 2 - self.width / 2;
                    y : 5phx;
                    Text {
                        text: "VIETNAM AIRLINES\n--------#######--------";
                        color: black;
                        font-weight: 700;
                        font-size: 16phx;
                    }
                }
                width: CONST-FUNCTION-GLOBAL.MAX_WIDTH;
                height: CONST-FUNCTION-GLOBAL.MAX_HEIGHT * 0.92;
                clock := Rectangle {
                    width: 200phx;
                    height: 40phx;
                    background: rgba(255,255,255, 0.5);
                    y: 12phx;
                    z : 0;
                    x : parent.width / 2 - self.width - 160phx;
                    Text {text: functionAPP.currentTime; font-size: 20phx;font-weight: 700; color: whitesmoke;}
                }
                passengerPage {
                    z : 1;
                    unFocusPassengerPage => {unFocusALLFoucus()}
                }
                planePage {
                    z : 1;
                    takeDataPlanePage_EditPlane_PlanePage => {
                        takeDataPlanePage_EditPlane_homePage();
                    }
                    unFocus_PlanePage => {
                        unFocusALLFoucus();
                    }
                }
                flightPage {
                    unfocus_flightPage => {
                        unFocusALLFoucus();
                    }
                    takeDATA_flightPage => {
                        takeDAtaToEditFlight_homePage();
                    }
                    z : 1;
                }
                statistical {
                    z : 1;
                    unFocus_statistical => {unFocusALLFoucus()}
                }
                listPassenge_ofOneFlight {z : 1;}
                addPlanePage {
                    z : 2; 
                    x : (parent.width / 10) * 6.85;
                    unFocusAddPlanePage => {
                        unFocusALLFoucus();
                    }
                }
                editPlanePage := editPlanePage {
                    z : 2; x : (parent.width / 10) * 6.85; 
                    unFocusEditPlanePage => {unFocusALLFoucus()}
                }
                AllPassengerPage {
                    z : 1;
                    unfocus_AllPassengerPage => {
                        unFocusALLFoucus();
                    }
                    takeDataPlanePage_EditPassenger_AllPassengerPage => {
                        takeDataPlanePage_EditPassenger_homePage();
                    }
                }
                ticketPage {
                    z : 1;
                }
                // passengerListFlight {
                //     z : 1;
                // }
                editAllPassengerPage := editAllPassengerPage {
                    unFocus_editAllPassengerPage => {
                        unFocusALLFoucus();
                    }
                    z : 2; x : (parent.width / 10) * 6.85; 
                }

                addPASSENGER_ALLPAGE := addPASSENGER_ALLPAGE {
                    unfocus_addPASSENGER_ALLPAGE => {
                        unFocusALLFoucus();
                    }
                    z : 2; x : (parent.width / 10) * 6.85; 
                }
                addFlight := addFlightPage {
                    unfocus_addFlightPage => {unFocusALLFoucus()}
                    z : 2;
                    x : (parent.width / 10) * 6.85; 
                }
                editFLight := editFlightPage {
                    unfocus_editFlightPage => {
                        unFocusALLFoucus();
                    }
                    z : 2;
                    x : (parent.width / 10) * 6.85; 
                }
            }
        }
    }
}